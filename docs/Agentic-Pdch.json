{
  "name": "Agentic-Pdch",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f26c2c1e-627e-403c-8dfb-5641361a09e7",
              "leftValue": "={{ $('datos_oficiales').item.json.mensaje }}",
              "rightValue": "=0",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -17488,
        -5360
      ],
      "id": "8f6b8685-be6d-4b44-b56b-9a150ee7b7e2",
      "name": "0"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3db655b2-fd1d-4acb-b9ac-25e70c431c53",
              "name": "realtor_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "280377bc-e672-4f12-a14b-ae3d90a5a086",
              "name": "celular",
              "value": "={{ $('Webhook').item.json.body.telephone }}",
              "type": "number"
            },
            {
              "id": "295f5ae1-f057-4df7-a841-9f59a6e78e39",
              "name": "nombre",
              "value": "={{ $('Webhook').item.json.body.name }}",
              "type": "string"
            },
            {
              "id": "857ed1e8-a792-44ae-ad51-d82ae2293f71",
              "name": "channel_id",
              "value": "={{ $('Webhook').item.json.body.channel_id }}",
              "type": "string"
            },
            {
              "id": "25fe737e-fe00-4cef-b480-9ae3bfb4bd75",
              "name": "chat_id",
              "value": "={{ $('Webhook').item.json.body.chat_id }}",
              "type": "string"
            },
            {
              "id": "9e1850fe-32a7-4ac2-913d-42b8135e2abb",
              "name": "mensaje",
              "value": "={{ $('Webhook').item.json.body.message }}",
              "type": "string"
            },
            {
              "id": "a79a6f9d-7fce-4785-a4bc-fcaeedc36188",
              "name": "id_vector_project",
              "value": "=vector_projects_{{ $json.name.replace(/ /g, '_') }}_{{ $json.id.replace(/-/g, '_') }}",
              "type": "string"
            },
            {
              "id": "1d7cb087-78d7-46e8-8c93-0f0a208cdcd6",
              "name": "session_id",
              "value": "={{ $('Webhook').item.json.body.session_id }}",
              "type": "string"
            },
            {
              "id": "4a2d8b5e-aada-492e-b1f4-fd1d73068d7a",
              "name": "followup_configuration",
              "value": "={{ $json.followups_prospects }}",
              "type": "array"
            },
            {
              "id": "3f46bf87-637e-4c2f-abe9-c030feab2ca8",
              "name": "notifications_brokers_configurations",
              "value": "={{ $json.followups_brokers }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -20576,
        -5344
      ],
      "id": "e7a295e8-8121-429b-a731-6abf86cc11d5",
      "name": "variables_primeras"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8ad108f3-25c9-413f-a9ea-8c1ef86fb37d",
              "leftValue": "={{ $('busqueda_prospectos').item.json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -19808,
        -5344
      ],
      "id": "3348f272-a9ac-48ee-a000-55b644e4a209",
      "name": "If",
      "alwaysOutputData": false,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "prospects",
        "filters": {
          "conditions": [
            {
              "keyName": "realtor_id",
              "keyValue": "={{ $('variables_primeras').item.json.realtor_id }}"
            },
            {
              "keyName": "telephone",
              "keyValue": "={{ $('variables_primeras').item.json.celular }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -20080,
        -5344
      ],
      "id": "117c57f1-9a3a-48e1-b922-96ce42673ba4",
      "name": "busqueda_prospectos",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "prospects",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "name",
              "fieldValue": "={{ $('variables_primeras').item.json.nombre }}"
            },
            {
              "fieldId": "automatization",
              "fieldValue": "TRUE"
            },
            {
              "fieldId": "telephone",
              "fieldValue": "={{ $('variables_primeras').item.json.celular }}"
            },
            {
              "fieldId": "stage",
              "fieldValue": "new-prospect"
            },
            {
              "fieldId": "realtor_id",
              "fieldValue": "={{ $('variables_primeras').item.json.realtor_id }}"
            },
            {
              "fieldId": "calification_variables",
              "fieldValue": "={{ { fecha_compra_estimativa: \"\", forma_pago: \"\" } }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -19472,
        -5232
      ],
      "id": "f4cab08e-caca-4ef1-8dc0-ea14a8bb4cc9",
      "name": "crear_prospectos",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Reconocimiento de Variables\nSe búsca el Channel_ID para identificar el canal de whapi y la inmobiliaria a la cual pertenece.",
        "height": 400,
        "width": 720,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -21120,
        -5472
      ],
      "typeVersion": 1,
      "id": "8af6a104-bdfe-4b76-8489-c0f71bc9ca4d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Búsqueda/Creación del prospecto\nBuscamos si el prospecto existe en la BD, si no existe se crea un prospecto nuevo.\n2. get_properties: vamos a buscar a la tabla prospect_project_interested qué propiedad tienen de interes el prospecto\n3. join_properties: va a unir si es que hay mas de uno como un arraiy con los id's\n4. datos_oficiales: Junto los datos de la tabla prospects más los proyectos interesados y todo lo de variables primeras",
        "height": 660,
        "width": 1860
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -20176,
        -5680
      ],
      "typeVersion": 1,
      "id": "4f0c4059-5d7a-466c-b765-5af8c3279158",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('datos_oficiales').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -16944,
        -5104
      ],
      "id": "ff259fb6-0786-422b-9df8-000c89c867d4",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Filtros\n**Primeros filtros pueden ser**:\n- Automatización: Si está activada sigue, si no, notifica al vendedor con un resumen de la conversación.\n- Si no desea más seguimiento: Si el usuario no desea más seguimiento y responde con un \"0\", entonces el sistema desactivará su automatización.",
        "height": 780,
        "width": 780,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -18080,
        -5552
      ],
      "typeVersion": 1,
      "id": "0c7e87c5-7eec-4797-872e-dbfa486c4244",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Agente Madre:\nReconoce la intención del usuario según el último mensaje y el historial de conversación. Los módulos siguientes de Supabase son para borrar la respuesta del Agente en Supabase",
        "height": 620,
        "width": 1400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -17136,
        -5520
      ],
      "typeVersion": 1,
      "id": "f2e85ffa-b84b-49e5-ab6c-afba8805528a",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {
          "dimensions": 1536
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.1,
      "position": [
        -14112,
        -5296
      ],
      "id": "75a302fe-cb8c-413e-9691-7d1c31cc46bc",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "gl": "cl",
          "hl": "es"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        -13680,
        -5552
      ],
      "id": "ca4a8b97-6e02-4de1-82d6-0e930c7a7fcc",
      "name": "Internet_tool",
      "credentials": {
        "serpApi": {
          "id": "fErKfifnEPqMV5fg",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a070486c-0b05-4b99-983c-f6dfe335f84a",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "=busqueda_informacion",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            },
            {
              "id": "d69234eb-5d2c-4e42-97a3-237dc4ae26de",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "pide_fotos_plano_videos",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14688,
        -5872
      ],
      "id": "71d518b2-fca7-40dc-ab32-efaea10a69ad",
      "name": "Filter_rag",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Tu misión es identificar si el usuario muestra interés explícito en uno o más proyectos inmobiliarios y guardarlos en Supabase, asegurándote que sólo estén enlazados los proyectos de interés y no haya duplicados.\n\nPara lograrlo, tienes disponible un MCP llamado MCP_UPDATE_INTRESTED_PROJECTS y sus herramientas.\n\n### Pasos a seguir:\n\n#### 1. Identificación de Herramientas Necesarias\n- Extrae el mensaje del usuario, analiza el historial de conversación e identifica el nombre del o los proyectos que está interesado el usuario.\n- Usa la función List Tools para identificar las herramientas disponibles en el servidor MCP.\n- Elige la herramienta adecuada para cada paso:\n\n1. Extrae los nombres oficiales y los ID de todos los proyectos/propiedades disponibles. A partir del historial de conversación, identifica cuáles son los proyectos/propiedades de interés del usuario y conserva únicamente sus ID.  \n2. Con los ID identificados, **actualiza en Supabase** los datos del usuario: agrega los proyectos/propiedades de interés actual y elimina la asociación con los que ya no correspondan, de manera que solo queden vinculados los proyectos/propiedades vigentes.  \n\n###2. Selección y Ejecución de Herramientas\nUna vez identficada la herramienta adecuada, usa la función Execute Tool para realizar la acción soliciitada.\nIncluye todos los parámetros requeridos según el esquema de la herramienta, estos son por cada una:\n\n\"obtener_id_proyecto\": \"realtor_id\" (el id para acceder a todos los proyectos de la inmobiliaria): “{{ $json.realtor_id }}”, \n“agregar_proyecto”:  \"prospect_id\" (el id del prospecto que agregarás su proyecto): “{{ $json.prospect_id }}”, \n“project_id” (el id del proyecto que obtuviste)\n“desenlazar_proyecto”:  \"prospect_id\" (el id del prospecto que borrarás su proyecto): “{{ $json.prospect_id }}”, \n“project_id” (el id del proyecto que obtuviste)\n“revisar_proyectos_enlazados”: \"prospect_id\" (el id del prospecto que agregarás su proyecto): “{{ $json.prospect_id }}”\n\n\n#### 3. Salida esperada\nEn formato json, responde de la siguiente forma:\n{\n\t\"actualizado\": \"\"\n}\n- Con “si” si lograste identificar y actualizar los proyectos de interés del usuario.\n- Con “no” si no reconociste ningún proyecto mencionado.\n\n#### Notas importantes:\n- Solo se considerará reconocido un proyecto si se menciona su **nombre exacto**.\n- Puedes reconocer uno o varios proyectos según lo indicado en la conversación.\n- Verifica siempre que los campos requeridos estén presentes antes de ejecutar cualquier herramienta."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -13312,
        -6816
      ],
      "id": "29882d8b-d09c-40bc-a643-620ab3ecab49",
      "name": "ACTUALIZAR_PROYECTO",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -13312,
        -6560
      ],
      "id": "2312e0e4-3a68-4c57-8579-4c2118e7ec17",
      "name": "Postgres Chat Memory2",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a070486c-0b05-4b99-983c-f6dfe335f84a",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "anotar_proyecto",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14720,
        -6816
      ],
      "id": "1769e7f0-02e7-41b0-a0d4-b42f97cc6a42",
      "name": "Filter_intention",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "content": "## Extrae proyectos para pasarselos al Agente\n**\n-Solo la intención de actualizar proyecto entra a este flujo\n-Se extraen todos los proyectos inmobiliarios existentes\n-Se ponen en una lista de texto para pasarlos al Agente\n   ",
        "height": 460,
        "width": 1140
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -15072,
        -6944
      ],
      "typeVersion": 1,
      "id": "64c175a3-fc12-4749-9081-92dadb1279ee",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## Agente Actualzar Poyectos\n\nEste agente recibe la lista de proyectos según su nombre. Luego según el input y el historial del usuario determina qué proyecto le interesa al usuario",
        "height": 640,
        "width": 720
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -13504,
        -6992
      ],
      "typeVersion": 1,
      "id": "1689fa91-605a-448a-9af5-699c83507a4d",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a070486c-0b05-4b99-983c-f6dfe335f84a",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "forma_pago",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            },
            {
              "id": "b2aaa422-a58b-4f6e-aef0-3fbf848c92e7",
              "leftValue": "={{ $node[\"Agente_madre\"].json.output.intencion }}",
              "rightValue": "fecha_compra",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14800,
        -4672
      ],
      "id": "799c5a6c-8201-4c94-b2f5-a960c023d29d",
      "name": "Filter_calification",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "model": "gpt-5-mini",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -14080,
        -4416
      ],
      "id": "3d666403-0a82-431f-97cb-d1f0dae92269",
      "name": "OpenAI Chat Model6",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -13920,
        -4256
      ],
      "id": "5cc8755b-8467-4294-99ed-1b7e43821e6e",
      "name": "Postgres Chat Memory4",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Tu objetivo es determinar si un prospecto está calificado para una compra en función de su forma de pago y fecha estimada de compra debes actualizar esta información en supabase.\n\nPara lograrlo, tienes disponible un MCP llamado MCP_PdCH_Server_Qualification y sus herramientas.\n\n### Pasos a seguir:\n\n#### 1. Identificación de Herramientas Necesarias\n- Analiza el mensaje del usuario, analiza el historial de conversación y extrae información válida para calificarlo:\n<informacion_para_extraer>\n     a. Forma de Pago (forma_pago): Es la manera económica en que el prospecto piensa adquirir la propiedad, guardalas de la siguiente forma según lo que el prospecto diga:\n      - \"Al contado\" sólo si menciona \"efectivo\", \"transferencia\" o \"vale vista\"\n      - \"Crédito de consumo o fines generales\" sólo si si se mencionan \"crédito de consumo\" o \"crédito con fines generales\"\n      - \"Financiamiento directo\" sólo si se menciona \"financiamiento directo\"\n      - \"Otro\" para cualquier otro método de pago que se mencione\n\n   b. Fecha Estimada de Compra (fecha_compra_estimativa): Es la fecha hacia el futuro en el cual el prospecto va a adquirir la propiedad.\n      - Convierte las fechas mencionadas al formato \"YYYY-MM-DD\", asumiendo que son fechas futuras tomando en consideración la fecha de hoy (fecha_actual).\n      - Ejemplos:\n        - \"En dos meses\" (si hoy es 2024-11-08) → \"2025-01-08\"\n        - \"A principios de enero\" (si hoy es 2024-11-08) → \"2025-01-05\"\n        - \"Cuando pueda, no tengo apuro\" → usa la fecha actual\n\n    #Notas importantes: \n        - NUNCA debes actualizar la Fecha Estimada de Compra sin antes ocupar la herramienta \"fecha_actual\".\n        - NUNCA debes confundir cuando el usuario se refiere a una fecha en la que desea \"comprar\", a una en la que desea \"visitar\". Son cosas diferentes que no deben ser confundidas.\n</informacion_para_extraer>\n- Usa la función List Tools para identificar las herramientas disponibles en el servidor MCP.\n- Elige la herramienta adecuada para cada paso:\n1. Actualiza en Supabase la información de calificación que identificaste en el mensaje del usuario. Debes complementar la información de  calificación registrada del prospecto (si existe) sin eliminar ni reemplazar datos existentes, excepto cuando el mensaje indique claramente una actualización o corrección de un dato previo (por ejemplo, un cambio explícito de la forma de pago de 'contado' a 'crédito')\n- *Nota: Si no reconoces información relevante del mensaje para extraer, no actualices información en supabase*\n2. En caso de ya tener todas las variables de calificación, procede a actualizar en Supabase al prospecto en “qualified” o “not-qualified” (con las herramientas prospecto_calificado o prospecto_no_calificado)\n\n###2. Selección y Ejecución de Herramientas\nUna vez identficada la herramienta adecuada, usa la función Execute Tool para realizar la acción soliciitada.\nIncluye todos los parámetros requeridos según el esquema de la herramienta, estos son por cada una:\n\n\"actualizar_informacion_calificacion\": \"prospect_id\" (el id del prospecto que actualizarás su información): “{{ $json.prospect_id }}”, \n“calification_variables” (las variables de calificación), siempre debe ser en este formato json: {\"forma_pago\": \"\", \"fecha_compra_estimativa\": \"\"}\n- Nota: Siempre debes incluir ambas variables (\"forma_pago\" y \"fecha_compra_estimativa\"). Si no logras reconocer una variable en el mensaje actual, déjala vacía (\"\")  o con el valor que estaba para mantener intacta la información previa en Supabase. Solo actualiza las variables que identificaste claramente en el mensaje.\n“Obtener_información_calificacion”:  \"prospect_id\" (el id del prospecto que agregarás su proyecto): “{{ $json.prospect_id }}”\n“fecha_actual”:  No requiere parámetros.\n“prospecto_calificado”:  \"prospect_id\" (el id del prospecto que agregarás su proyecto): “{{ $json.prospect_id }}”\n“prospecto_no_calificado”:  \"prospect_id\" (el id del prospecto que agregarás su proyecto): “{{ $json.prospect_id }}”\n“Calculator”: No requiere parámetros.\n\n\n#### 3. Salida esperada\nDebe ser en el siguiente formato JSON:\n{\n    \"estado\": \"calificado para una visita\" o \"no calificado para una visita porque..(razón por no estar calificado)\" o \"falta información de [variable_faltante] para agendar una visita\"\n}\n\n#### Notas importantes:\n- Sólo si tienes todas las variables de calificación puedes evaluar a un prospecto como calificado o no calificado de la siguiente forma:\n   - Calcula el número de días entre la \"fecha_compra_estimativa\" y la fecha actual ocupando siempre tu herramienta \"calculator\" solo con la expresión:  \n    **'fecha_compra_estimativa - fecha_actual'**,  \n    donde ambos valores deben estar en formato \"YYYY-MM-DD\".\n  - El resultado debe interpretarse como el número de días de diferencia entre la fecha estimada de compra y la fecha actual.\n  - **Nunca realices restas aritméticas directas sobre los strings de las fechas. Solo usa la herramienta calculator para calcular la diferencia de días entre dos fechas.**\n   - Si la diferencia entre la \"fecha_compra_estimativa\"  y la fecha actual es mayor a 1 mes (30 días), y/o \" forma_pago\"  es \"Otro\", el prospecto no está calificado (not-qualified)\n   - De lo contrario, el prospecto sí está calificado (\"qualified\" cuando la diferencia entre la \"fecha_compra_estimativa\"  y la fecha actual es menor o igual a 1 mes (30 días), y \" forma_pago\"  no es \"Otro\")\n   - *Recuerda*, que siempre que hagas la calificación al usuario debes actualizar en Supabase al prospecto en “qualified” o “not-qualified”. \n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -13824,
        -4672
      ],
      "id": "903fa94b-1d57-4a89-8016-82e4f8cdfd39",
      "name": "CALIFICAR_USUARIO",
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "realtors",
        "filters": {
          "conditions": [
            {
              "keyName": "channel_id",
              "keyValue": "={{ $json.body.channel_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -20800,
        -5344
      ],
      "id": "df235e46-a60e-4947-95ed-eb9e5491e5e8",
      "name": "extraer inmobiliaria_id",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Followup Prospects\n1. Switch: revisa si la columna followups_prospects existe información (no es null) en ese caso entonces se asume que la inmobiliaria confoguró al menos para hacer 1 seguimiento.\n2. get_followups_scheduled: Va a buscar a la tabla followups si es que existe algún seguimiento al prospecto que no esté completado. Filtra por prospect_id, realtor_id, completed: false, type: prospect\n3. if: si existen followups anteriores incompletos, se irá a true, si no a false.\n4. Delete: Los followups anteriores incompletos se eliminarán\n5. create_followup_prospects: Se creará un nuevo registro en la tabla \"followups en el cual se guardará la fecha de seguimiento considerando sólamente el seguimiento que tenga Order_followup: \"1\", ya que eso quiere decir que es el primer seguimiento que debe hacerse",
        "height": 480,
        "width": 1580
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -14912,
        -8064
      ],
      "typeVersion": 1,
      "id": "eb940946-7496-487c-8601-e8f6d46d7f9e",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "17f87edc-655e-4474-8643-f3e21b5109cb",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -21040,
        -5344
      ],
      "id": "822364a0-e5fe-4621-99a2-f74bfc57c847",
      "name": "Webhook",
      "webhookId": "17f87edc-655e-4474-8643-f3e21b5109cb"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a604254b-540e-45c4-9664-499067bf3587",
              "name": "session_id",
              "value": "={{ $node['datos_oficiales'].json.session_id }}",
              "type": "string"
            },
            {
              "id": "810b9b01-656a-41c6-b337-4c373d751a6b",
              "name": "mensaje",
              "value": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
              "type": "string"
            },
            {
              "id": "009f8c51-d809-44d3-bb01-2ea57ed8087b",
              "name": "realtor_id",
              "value": "={{ $node[\"datos_oficiales\"].json.realtor_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -14368,
        -5872
      ],
      "id": "73468a6e-bd67-4018-9107-3b8e700678a3",
      "name": "Setear"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -14288,
        -5504
      ],
      "id": "c749d4fb-c8ad-49cc-a60f-413999c52ce3",
      "name": "Postgres Chat Memory3",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -14384,
        -5616
      ],
      "id": "1404e09c-c068-400b-8723-b087f7157287",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Rol\nEres un agente EXPERTO EN EXTRACCION DE INFORMACION para una empresa inmobiliaria. No conversas con el usuario: solo extraes hechos verificables desde las herramientas y devuelves un JSON. NUNCA inventes, recomiendes, opines ni hagas preguntas.\n\n<model_params>\n- reasoning_effort: minimal\n- verbosity: low\n- agentic_eagerness: low\n- tool_preambles: off\n- stop_condition: en cuanto tengas los datos verificados o se confirme que no hay información, entrega el JSON y termina.\n</model_params>\n\n# Herramientas (obligatorio seguir este orden)\n1) informacion_proyectos_y_empresa  (SIEMPRE primero)\n   - Proyectos disponibles (fichas, IDs).\n   - Información de la empresa (políticas, formas de pago, etc.).\n   - Ubicaciones y link de Google Maps del proyecto (si aplica).\n\n2) Internet_tool (Serp API Tool)  (OPCIONAL y RESTRINGIDA)\n   - Solo para “referencias o cercanías” de un proyecto ESPECIFICO ya mencionado cuando la herramienta 1 no lo provea.\n   - Extrae solo datos puntuales; NO enlaces (excepto Maps si proviene de la herramienta 1), NO otros proyectos.\n\n# Procedimiento (determinístico)\n1) Lee el input y el historial solo para identificar la consulta explícita y entidades (proyecto/región/ID).\n2) Consulta informacion_proyectos_y_empresa. Si no hay resultados:\n   - Reintenta con sinónimos/variantes mínimamente 2 veces (ej.: “VI Región”, “Sexta Región”, “Región de O’Higgins”).\n3) SOLO si la consulta es de “referencias/cercanías” de un proyecto ya identificado y la herramienta 1 no tiene el dato, usa UNA llamada a Internet_tool.\n4) Si el usuario pidió UBICACION, solicita a informacion_proyectos_y_empresa el link de Google Maps del proyecto y **agrégalo** en la respuesta.\n5) Construye la respuesta con HECHOS EXACTOS de las herramientas.\n6) “project_id” debe contener TODOS los IDs de propiedades mencionadas (sin duplicados). Si no hay propiedades, usa [].\n7) Si no encontraste información suficiente tras los reintentos, dilo explícitamente y devuelve project_id: [].\n\n# Prohibiciones (hard)\n- No recomendaciones (“te sugiero”, “opciones”, “presupuestos”, “podemos gestionar”, “si quieres puedo…”).\n- No preguntas al usuario.\n- No ofertas de ayuda, coordinación, WhatsApp, llamadas, derivaciones, ni pasos siguientes.\n- No enlazar sitios externos ni otros proyectos (salvo Google Maps obtenido desde la herramienta 1).\n- No inferencias ni supuestos fuera de lo entregado por herramientas.\n\n# Validación antes de responder (autochequeo)\n- La respuesta NO debe contener: “si quieres”, “puedo”, “podemos”, “prefieres”, “¿” (preguntas), “coordin”, “enviarte opciones/presupuestos”.\n- Contener solo hechos verificados y, si aplica, el link de Google Maps de la herramienta 1.\n\n# Formato de salida (OBLIGATORIO)\nDevuelve EXCLUSIVAMENTE este JSON, sin texto adicional:\n\n\"output\": {\n  \"respuesta\": \"<texto basado únicamente en datos de herramientas; sin recomendaciones, sin preguntas>\",\n  \"project_id\": [\"<id_propiedad_1>\", \"<id_propiedad_2>\"]\n}\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -14112,
        -5872
      ],
      "id": "37b0af4c-7c67-4a64-96d9-7ecd3eb69f81",
      "name": "RAG",
      "executeOnce": false,
      "alwaysOutputData": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a604254b-540e-45c4-9664-499067bf3587",
              "name": "session_id",
              "value": "={{ $node['datos_oficiales'].json.session_id }}",
              "type": "string"
            },
            {
              "id": "810b9b01-656a-41c6-b337-4c373d751a6b",
              "name": "mensaje",
              "value": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
              "type": "string"
            },
            {
              "id": "e7501946-3b13-4336-8214-1b6b039bee2d",
              "name": "prospect_id",
              "value": "={{ $node[\"datos_oficiales\"].json.id_prospect }}",
              "type": "string"
            },
            {
              "id": "db29cb5e-5f2a-42da-97ca-7a63cf58b22d",
              "name": "realtor_id",
              "value": "={{ $node[\"datos_oficiales\"].json.realtor_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -14304,
        -6816
      ],
      "id": "dea08d6a-3cac-4a57-be70-55622a4c4dfa",
      "name": "Setear1"
    },
    {
      "parameters": {
        "content": "## Rag Agent\n- Filtro\n- Setear variables ya que el nodo de memoria no acepta llamar a variables primeras.\n- El agente Rag va a buscar según el id de la inmobiliaria. Entonces todos los proyectos de esa inmobiliaria los va a buscar.",
        "height": 980,
        "width": 2100
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -15072,
        -6080
      ],
      "typeVersion": 1,
      "id": "0bb73f1d-a9c5-4880-9ad7-f4ebd89f265e",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a604254b-540e-45c4-9664-499067bf3587",
              "name": "session_id",
              "value": "={{ $node['datos_oficiales'].json.session_id }}",
              "type": "string"
            },
            {
              "id": "810b9b01-656a-41c6-b337-4c373d751a6b",
              "name": "mensaje",
              "value": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
              "type": "string"
            },
            {
              "id": "d1a7626e-1c2e-4504-862b-684fe9432663",
              "name": "prospect_id",
              "value": "={{ $node[\"datos_oficiales\"].json.id_prospect }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -14144,
        -4672
      ],
      "id": "223b8eac-231e-425b-b62e-c4ae2f2cac47",
      "name": "Setear2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "df46d83b-75d7-4d0e-9106-20c9e8d7bfad",
              "leftValue": "={{ $node[\"datos_oficiales\"].json.stage }}",
              "rightValue": "conversation",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "a4fca27b-8ff6-4f7e-b162-04be53d51503",
              "leftValue": "={{ $node[\"datos_oficiales\"].json.stage }}",
              "rightValue": "=not-qualified",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14480,
        -4672
      ],
      "id": "69482962-9da3-44f0-b7e6-5fca6340037c",
      "name": "filtro_etapa"
    },
    {
      "parameters": {
        "content": "## Agente calificación\n- Filtro 1\n- Filtro 2: Que el prospecto esté en las etapas adecuadas\n- Setear variables ya que el nodo de memoria no acepta llamar a variables primeras.\n- El agente de calificación y sus herramientas se modifican según los criterios de calificación de la inm,obiliaria",
        "height": 960,
        "width": 2320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -15088,
        -4944
      ],
      "typeVersion": 1,
      "id": "ff85f0b7-49ea-440a-aee8-55d5b780fa98",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "mode": "delete"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -16320,
        -5360
      ],
      "id": "6abbd768-9a90-4d56-9475-f5041896c4ac",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('datos_oficiales').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -16272,
        -5136
      ],
      "id": "cdaff068-fef6-4675-a5ab-455662f3d426",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "delete"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -13584,
        -6016
      ],
      "id": "ad464e97-ac51-43d7-bab6-1c3eb49a0cfa",
      "name": "Chat Memory Manager1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Setear').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -13168,
        -5904
      ],
      "id": "b651aed3-5f69-4a89-91cc-72155a87540e",
      "name": "Postgres Chat Memory5",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "delete"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -12080,
        -7136
      ],
      "id": "e45d9047-4dd3-4ce8-94aa-f8782ac18d8c",
      "name": "Chat Memory Manager2"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Setear1').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -12032,
        -6976
      ],
      "id": "314b2844-85cb-4059-8c49-39516d7dfcd8",
      "name": "Postgres Chat Memory6",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sseEndpoint": "https://primary-production-1b8b.up.railway.app/mcp/MCP__PdCH_Server_Qualification/sse",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -13712,
        -4352
      ],
      "id": "e9eff6a1-8b49-474a-bff8-e610841ba5f8",
      "name": "MCP Calification"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"estado\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -13440,
        -4416
      ],
      "id": "b73e247b-414c-481f-8d55-7ae3f01a7bf6",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "mode": "delete"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -13152,
        -4576
      ],
      "id": "b0762563-d685-4900-8d9c-5a82bcc54bbe",
      "name": "Chat Memory Manager3"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Setear2').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -13104,
        -4352
      ],
      "id": "20610746-c265-4b5d-a7a6-fff2d39fc0b3",
      "name": "Postgres Chat Memory7",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c5361aa6-0ef0-4405-993e-6dc5dd7d0a01",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "fecha_visita",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            },
            {
              "id": "170e9b66-e3c4-440e-9ae6-08886c6958be",
              "leftValue": "={{ $node[\"datos_oficiales\"].json.stage }}",
              "rightValue": "qualified",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14832,
        -3744
      ],
      "id": "961331ab-90db-4947-9ee1-5d9c1880da90",
      "name": "Filter_schedule",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "name": "fecha_actual",
        "description": "Devuelve la fecha actual de hoy en formato YYYY-MM-DD\n",
        "jsCode": "const diasSemana = [\"Domingo\", \"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\", \"Sábado\"];\nconst fechaActual = new Date();\n\n// Obtener día de la semana en español.\nconst diaSemana = diasSemana[ fechaActual.getDay() ];\n\n// Obtener fecha en formato yyyy-mm-dd.\nconst fechaFormateada = fechaActual.toISOString().split('T')[0];\n\n// n8n espera que el retorno sea un string (o el tipo de dato configurado en ese nodo).\n// Aquí devolvemos un string con el formato: \"Lunes, 2024-12-23\"\nreturn `${diaSemana}, ${fechaFormateada}`;"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        -14032,
        -3376
      ],
      "id": "927eb12c-f9fa-4148-b569-534e4312eb11",
      "name": "fecha_actual1"
    },
    {
      "parameters": {
        "model": "gpt-5",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -14320,
        -3472
      ],
      "id": "56c08bb6-6f5e-4ee3-b80a-a87536b5bc6a",
      "name": "OpenAI Chat Model7",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Eres un asistente de inteligencia artificial encargado de extraer fechas de visita de los mensajes de los usuarios y registrarlas en Supabase. Tu misión es analizar cuidadosamente el mensaje del usuario y el historial de la conversación, identificar cualquier fecha de visita mencionada, y utilizar las herramientas proporcionadas para registrar esta información.\n\n\n#Sigue estos pasos:\n\n1. Lee cuidadosamente el mensaje del usuario y el historial de la conversación para identificar si se menciona una fecha de visita. Esta puede aparecer en varios formatos, como: \"Quiero visitar en dos semanas\", \"Agendemos una visita el 5 de enero\", \"a principios del próximo mes\", etc.\n\n2. Si se menciona una fecha de visita:\n a. Primero, utiliza la herramienta fecha_actual para obtener la fecha actual en formato YYYY-MM-DD.\n b. Calcula la fecha exacta de la visita basada en la fecha mencionada (Asume que es una fecha en el futuro) y la fecha actual.\n c. Utiliza la herramienta poner_fecha_visita con la fecha calculada en este formato: fecha=\"YYYY-MM-DD\"\n\n3. Si no se menciona ninguna fecha de visita en el mensaje del usuario o en el historial de la conversación, no utilices ninguna herramienta.\n\n4. Tu salida final debe estar en formato JSON:\n - Si utilizaste alguna herramienta, la salida será: {\"result\": \"OK\"}\n - Si no utilizaste ninguna herramienta, la salida será: {\"result\": \"NULL\"}\n - No incluyas texto o propiedades adicionales en tu respuesta.\n\n#Ejemplos:\n - \"En dos meses\" (si hoy es 2024-11-08) → \"2025-01-08\"\n - \"A principios de enero\" (si hoy es 2024-11-08) → \"2025-01-05\"\n - \"Cuando pueda, no tengo prisa\" → usa la fecha actual\n\n#Recuerda:\n - Solo genera la respuesta en formato JSON, nada más.\n - Siempre utiliza la herramienta según las especificaciones, no las modifiques.\n - Si no se menciona una fecha de visita, no utilice la herramienta.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -14208,
        -3744
      ],
      "id": "1e457a1d-4c8b-401b-bc63-ae0d852b2faa",
      "name": "AGENDAR_VISITA",
      "executeOnce": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -14192,
        -3392
      ],
      "id": "3123076d-69bd-4eef-b747-42a58dc30548",
      "name": "Postgres Chat Memory8",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a604254b-540e-45c4-9664-499067bf3587",
              "name": "session_id",
              "value": "={{ $node['datos_oficiales'].json.session_id }}",
              "type": "string"
            },
            {
              "id": "810b9b01-656a-41c6-b337-4c373d751a6b",
              "name": "mensaje",
              "value": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
              "type": "string"
            },
            {
              "id": "b54fdc1d-dbb2-4397-9150-71d496fdffb0",
              "name": "prospect_id",
              "value": "={{ $node[\"datos_oficiales\"].json.id_prospect }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -14544,
        -3744
      ],
      "id": "9f9f6f17-4e9e-49aa-9a56-9c283202a7d6",
      "name": "Setear3"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.prospect_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "scheduled_at",
              "fieldValue": "={{ $fromAI(\"fecha\") }}"
            },
            {
              "fieldId": "stage",
              "fieldValue": "=scheduled"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -13872,
        -3440
      ],
      "id": "7185abd5-2cf2-480d-b520-f873fba4e75f",
      "name": "poner_fecha_visita",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Agendar visita\nAgente ocupa herramienta para ver la fecha actual, luego la herramienta de supabase para actualizar la fecha.",
        "height": 720,
        "width": 2340
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -15120,
        -3840
      ],
      "typeVersion": 1,
      "id": "553a72f8-2dda-4d67-9585-3b55b5e20465",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "mode": "delete"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -13328,
        -3616
      ],
      "id": "7ec708d2-0eb1-4b3b-8ff0-e4f94a030bc6",
      "name": "Chat Memory Manager4"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Setear3').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -13280,
        -3392
      ],
      "id": "9ba2bf76-0930-4de2-86ef-529f62321f15",
      "name": "Postgres Chat Memory9",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d37e9e7f-e0be-4611-ba01-7f5614d025a4",
              "name": "output_rag",
              "value": "=<información adicional>\nEl usuario ha consultado por información, esto es lo que se pudo extraer para responder a esa consulta: \"{{ $json.output.respuesta }}\"\n</información adicional>\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -13472,
        -5776
      ],
      "id": "666812e3-65e1-4c24-a031-dcd0f1d2e7d0",
      "name": "output_rag"
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
        "options": {
          "systemMessage": "=Eres {{ $node[\"datos_oficiales\"].json.name_bot }}, asistente virtual de \"{{ $node[\"datos_oficiales\"].json.name_realtor }}\", una empresa inmobiliaria. Tu misión es atender necesidades específicas del usuario y avanzar según la etapa actual, sin inventar información ni proponer pasos fuera de pauta.\n\n<prioridad_instrucciones>\n1) Seguridad y alcance: no inventes; habla solo de proyectos/servicios de la empresa.\n2) Casos especiales (post‑venta o proyecto “Las Palmas”): incluye SIEMPRE el contacto indicado.\n3) <instrucciones_etapa> (autoridad principal para qué decir y qué no decir).\n4) <informacion_adicional> (úsala como contexto; jamás copies literal; integra y sintetiza).\n5) Reglas generales de estilo y formato.\n</prioridad_instrucciones>\n\n<instrucciones_para_responder>\n\n1. Analiza el contexto:\n   - Revisa el último mensaje del usuario y hasta 2–3 turnos previos para entender el hilo.\n\n2. Guia tu respuesta según la etapa (sigue la instrucción, pero no seas insistente con el usuario):\n   <instrucciones_etapa>\n   {{ $node[\"prompt_etapa\"].json.instruccion_etapa }}\n   </instrucciones_etapa>\n\n3. Usa “Información adicional” como contexto PRIORITARIO (sin copiar literal):\n   <informacion_adicional>\n   {{ $node[\"unir_variables\"].json.enviado }}\n   {{ ( $node[\"unir_variables\"].json.informacion_para_responder || '' )\n        .replace(/{/g, '')\n        .replace(/}/g, '') }}\n   {{ $node[\"unir_variables\"].json.calificacion_para_una_visita }}\n   {{ $node[\"unir_variables\"].json.estado_del_agendamiento }}\n   {{ $node[\"unir_variables\"].json.vendedor_contactado }}\n   {{ $node[\"unir_variables\"].json.anotar_desinteres }}\n   </informacion_adicional>\n\n4. Elabora la respuesta:\n   - Guía tu respuesta pero no seas insistente para el usuario con <instrucciones_etapa>.\n   - No inventes información ni promociones pasos no contemplados en la etapa.\n   - SIEMPRE tus respuestas deben ser breves. Nunca ioncluyas demasiado texto en la respuesta.\n\n5. Maneja casos especiales:\n   - Si la consulta es exclusivamente post‑venta o el usuario menciona “Las Palmas”, añade de forma natural:\n     Correo: monica.gonzalez@parcelasdechile.cl\n     Teléfono: +569 8642 1063\n   - Si el usuario pregunta o muestra intención de vender una propiedad, terreno, parcela o proyecto a Parcelas de Chile, responde únicamente con el siguiente texto: \"No tengo información para manejar casos de interés en vender\".\n \n\n6. Ubicaciones (Google Maps):\n   - Si el usuario solicita o menciona ubicación, incluye el enlace de Google Maps SI está disponible en tu contexto. \n   - Si no lo tienes, pregunta si desea recibirlo (una sola pregunta breve).\n\n\n</instrucciones_para_responder>\n\n# Salida\nDevuelve únicamente el mensaje listo para el usuario (sin metacomentarios ni marcas de sistema).\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -9488,
        -4816
      ],
      "id": "146b8877-67e2-4834-95bf-26062bb34610",
      "name": "RESPUESTA",
      "retryOnFail": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=#Input del usuario: \"{{ $('Setear4').item.json.mensaje }}\"\n\n# Respuesta del bot: \"{{ $node[\"fixing_response\"].json.text }}\"",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un sistema de análisis para una empresa inmobiliaria llamada \"{{ $node[\"datos_oficiales\"].json.name_realtor }}\".  \nTu misión es revisar la respuesta del chatbot de la empresa y determinar si debe generarse una justificación.  \nSolo debes justificar cuando el bot indique explícitamente que carece de información o sugiera contactar al equipo de la empresa.  \nEn todos los demás casos, la justificación debe ser \"No\".\n\n<model_params>\n- reasoning_effort: minimal\n- verbosity: low\n- agentic_eagerness: low\n- stop_condition: cuando hayas clasificado y devuelto el JSON, detente\n</model_params>\n\n<criterios_extraccion>\n1. Frases que indican falta explícita de información, como:\n   - \"No tengo información sobre...\"\n   - \"No contamos con información...\"\n   - \"No dispongo de información...\"\n   - \"No encontré información para...\"\n   - \"No hay información disponible...\"\n   - \"No tengo registro sobre...\"\n2. Frases que sugieren contactar al equipo de la empresa, como:\n   - \"Te recomendaría contactarte con el equipo de ventas...\"\n   - \"Te sugiero contactar directamente a la empresa...\"\n   - \"Que te comunique con un agente...\"\n   - \"Comunícate con nuestro equipo...\"\n3. Exclusiones obligatorias:\n   - No incluir frases donde el bot diga que algo no está disponible (p. ej., \"no tenemos ese proyecto\") si sí está dando información concreta.\n   - No incluir frases que aporten datos específicos, aunque no sean respuesta completa.\n</criterios_extraccion>\n\n<procedimiento>\n1. Revisa la respuesta del bot.\n2. Busca y cita solo las frases que cumplan criterios 1 o 2.\n3. Si hay al menos una frase válida:\n   a. Detecta el tema específico después de palabras como \"sobre\", \"para\", \"de\", \"relacionado con\".\n   b. Construye la justificación con este formato exacto:\n      \"El bot dijo que no tenía información suficiente para responder sobre [tema específico].\"\n4. Si no hay frases válidas, la justificación será \"No\".\n</procedimiento>\n\n<conversation_review>\n- Lista frases citadas que cumplan criterios.\n- Categoriza cada frase como \"falta de información\" o \"sugerencia para contactar al equipo\".\n- Indica el tema detectado, si aplica.\n- Indica si se requiere justificación.\n</conversation_review>\n\n# Formato de salida obligatorio\nDevuelve únicamente el siguiente JSON, sin texto adicional ni explicaciones:\n\n{\n  \"justificacion\": \"No\" o \"El bot dijo que no tenía información suficiente para responder sobre [tema específico].\"\n}\n\n\n\n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -7984,
        -4816
      ],
      "id": "09415810-1328-4c1e-abd3-31a47fcef1d7",
      "name": "Basic LLM Chain5"
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -8032,
        -4592
      ],
      "id": "ecd58716-ba71-40c9-973c-e54ffda758c9",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const result = {\n  informacion_para_responder: \"\",\n  calificacion_para_una_visita: \"\",\n  estado_del_agendamiento: \"\",\n  vendedor_contactado: \"\",\n  anotar_desinteres: \"\",\n  enviado: \"\"\n};\n\nconst items = $input.all();\nconsole.log(`[DEBUG] Cantidad de ítems de entrada: ${items.length}`);\n\nfor (let i = 0; i < items.length; i++) {\n  const data = items[i].json;\n  console.log(`[DEBUG] Ítem #${i}:`, JSON.stringify(data, null, 2));\n\n  // output_calification -> calificacion_para_una_visita\n  if (data.output_calification && !result.calificacion_para_una_visita) {\n    result.calificacion_para_una_visita = data.output_calification;\n    console.log(`[DEBUG] Se asigna calificacion_para_una_visita = ${data.output_calification}`);\n  }\n\n  // output_rag -> informacion_para_responder\n  if (data.output_rag && !result.informacion_para_responder) {\n    result.informacion_para_responder = data.output_rag;\n  }\n\n  // output_agendado -> estado_del_agendamiento\n  if (data.output_scheduled && !result.estado_del_agendamiento) {\n    result.estado_del_agendamiento = data.output_scheduled;\n  }\n\n  // mensaje_contacto -> vendedor_contactado\n  if (data.mensaje_contacto && !result.vendedor_contactado) {\n    result.vendedor_contactado = data.mensaje_contacto;\n  }\n\n  // mensaje_desinteres -> anotar_desinteres\n  if (data.mensaje_desinteres && !result.anotar_desinteres) {\n    result.anotar_desinteres = data.mensaje_desinteres;\n  }\n\n  // enviado -> enviado\n  if (data.enviado && !result.enviado) {\n    result.enviado = data.enviado;\n  }\n}\n\nconsole.log('\\n[INFO] Objeto final unificado:', JSON.stringify(result, null, 2));\nreturn [{ json: result }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -10624,
        -4816
      ],
      "id": "a3f9e8d9-f34c-46b6-abb7-0e8a013212d2",
      "name": "unir_variables"
    },
    {
      "parameters": {
        "jsCode": "// Obtén el valor de la etapa de la variable anterior\nconst etapa = $input.first().json.stage;\n\n// Define la variable instruccion_etapa según la etapa\nlet instruccion_etapa;\n\nswitch (etapa) {\n    case \"new-prospect\":\n        instruccion_etapa = `\n    - Descripción de la etapa: Aún no sabes qué propiedad le interesa al usuario\n    - Objetivo: Tienes que reconocer el o las propiedades de interés del usuario antes de avanzar. No puedes agendar visita en esta etapa aún.\n    - Nota: Si el usuario te dice que desea visitar, debes preguntarle primero qué propiedad le interesa.\n\n`;\n        break;\n    case \"conversation\":\n        instruccion_etapa = `\n       - *Descripción de la etapa*: Debes proporcionar toda la información y responder a sus dudas, SOLO cuando el usuario quiera avanzar a coordinar una visita, debes incluir preguntas que respondan lo siguiente: \n        1. Fecha en la que desea o planea comprar o adquirir la propiedad.\n        2. Forma en la que piensa o puede pagar o adquirir la propiedad.\n\n        (Debes ser sutil y nunca insistente al pedir esta información)\n        \n        Cuando obtengas alguna de esta información, recibirás en \"informacion_adicional\" qué información falta del usuario con el fin de guiar tus preguntas.\n        \n        Notas importantes: \n        Nunca asumas que una fecha mencionada para visitar la propiedad es igual a una fecha de compra. Considera únicamente fechas que se refieran explícitamente a la intención de adquirir o comprar la propiedad.\n\n        \n\n`;\n        break;\n    case \"qualified\":\n        instruccion_etapa = `\n    - *Descripción de la etapa*: Cuando el usuario está calificado para visitar presencialmente nuestros proyectos y queremos coordinar una visita.\n    - *Cómo guiar tu respuesta*: Tienes que consultarle una fecha en la que desea VISITAR y coordinarla.\n             - NUNCA debes confundir cuando el usuario se refiere a una fecha en la que desea \"COMPRAR\", a una en la que desea \"VISITAR\". Son cosas diferentes que no deben ser confundidas. Debes reconocer a qué se refiere el usuario según el contexto de la conversación.\n`;\n        break;\n    case \"not-qualified\":\n        instruccion_etapa = `\n    - *Descripción de la etapa*: Cuando el usuario no está apto o “calificado” para una visita dado que la fecha de compra es superior a 1 mes o la forma de pago no es aceptable por nuestra empresa. \n    - *Cómo guiar tu respuesta*: Debes responder a sus dudas, ser empático y explicarle al usuario que no puede visitar en estos momentos por las siguientes razones:\n<\n        a) Si es por forma de pago: Explicarle que no aceptamos otras formas de pago.\n        b) Si es por fecha de compra mayor a un mes: Explicale que, vamos a contactar a l usuario cerca de la fecha de compra para agendar una visita, ya que si visita en estos momentos puede ser que después cuando quiera comprar la parcela ya esté vendida. \n>\n`;\n        break;\n    case \"scheduled\":\n        instruccion_etapa = `\n    - *Descripción de la etapa*: Cuando el usuario ya ha sido agendado para una visita presencial con un  vendedor, pero aún la visita no está confirmada.\n    - *Cómo guiar tu respuesta*: Terminar sutilmente la conversación con el usuario, diciendole que vas a contactar a un ejecutivo para que confirme la disponibilidad de la fecha de visita, el ejecutivo se pondrá en contacto con el usuario a la brevedad posible para confirmar la visita.\n`;\n        break;\n    default:\n        instruccion_etapa = \"Etapa no reconocida. Por favor, verifica el valor de la etapa.\";\n}\n\n// Devuelve la variable instruccion_etapa como parte de la salida\nreturn {\n    json: {\n        instruccion_etapa: instruccion_etapa\n    }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9968,
        -4816
      ],
      "id": "293f7e73-e80a-4c9f-96b8-e282e8dca066",
      "name": "prompt_etapa"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "prospects",
        "filters": {
          "conditions": [
            {
              "keyName": "realtor_id",
              "keyValue": "={{ $node['datos_oficiales'].json.realtor_id }}"
            },
            {
              "keyName": "telephone",
              "keyValue": "={{ $node['datos_oficiales'].json.telephone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -10320,
        -4816
      ],
      "id": "e89d80da-c314-4184-879c-eb41977b29ad",
      "name": "datos_oficiales_prospectos1",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a604254b-540e-45c4-9664-499067bf3587",
              "name": "session_id",
              "value": "={{ $node['datos_oficiales'].json.session_id }}",
              "type": "string"
            },
            {
              "id": "c7465660-83bb-4312-9405-c7b79568adfd",
              "name": "mensaje",
              "value": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9712,
        -4816
      ],
      "id": "cdca0489-bc2d-49ab-97f4-4280636ec93a",
      "name": "Setear4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $node[\"datos_oficiales\"].json.telephone }}"
            },
            {
              "name": "body",
              "value": "={{ $node[\"fixing_response\"].json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5984,
        -4320
      ],
      "id": "e2fc2902-a0c8-486e-b883-ddc59d465b5a",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "responseFormat": "json_object",
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -13472,
        -6624
      ],
      "id": "4bfb4140-d1d0-4a12-9839-2153563746d1",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sseEndpoint": "https://primary-production-1b8b.up.railway.app/mcp/MCP_UPDATE_INTRESTED_PROJECTS/sse",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -13152,
        -6560
      ],
      "id": "9ad5acf5-0f79-42cd-8b79-cd95f0bc78f2",
      "name": "MCP_UPDATE_INTRESTED_PROJECTS"
    },
    {
      "parameters": {
        "numberInputs": 7
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -10880,
        -4912
      ],
      "id": "f01e4563-603c-4d4d-a59f-73f255d90956",
      "name": "Merge",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d37e9e7f-e0be-4611-ba01-7f5614d025a4",
              "name": "output_calification",
              "value": "=<información adicional>\nEstado de la calificación: \"{{ $json.output.estado }}\"\n</información adicional>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -13088,
        -4816
      ],
      "id": "9575bed0-87c7-4588-a17a-2b6f7c27f293",
      "name": "output_calification"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d37e9e7f-e0be-4611-ba01-7f5614d025a4",
              "name": "output_scheduled",
              "value": "=<información adicional>\nEstado del agendamiento:\nLa visita ha sido agendad con éxito, un vendedor se contactará lo antes posible con el prospecto para coordinar los detalles.\n</información adicional>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -12784,
        -3744
      ],
      "id": "9453909e-181a-4860-baff-621652cafefe",
      "name": "output_scheduled"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"actualizado\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -12992,
        -6624
      ],
      "id": "72593226-17fd-4074-87c5-d0fdcbfea9c0",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e2d39945-a48e-41b6-8502-25c1bd3f4c41",
              "leftValue": "={{ $json.output.actualizado }}",
              "rightValue": "si",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -12464,
        -6672
      ],
      "id": "e001346b-ae77-425d-9a71-164f75587765",
      "name": "If2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -12240,
        -6544
      ],
      "id": "f5ecbebd-7dbb-4a4d-b1f6-67949f0126d0",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "prospects",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $node[\"Setear1\"].json.prospect_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -12240,
        -6800
      ],
      "id": "07f86e70-146f-4a39-a699-3090736e3efc",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "149f4396-2dcc-45ff-a19c-d8d3a78be585",
              "leftValue": "={{ $json.stage }}",
              "rightValue": "new-prospect",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -11952,
        -6800
      ],
      "id": "c16c9066-104c-4ab0-ac78-2c3c1d2b59e4",
      "name": "If3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -11680,
        -6656
      ],
      "id": "fb38ffd3-e4f3-4f30-802e-27b3ed24c65b",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $node[\"Setear1\"].json.prospect_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "stage",
              "fieldValue": "conversation"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -11408,
        -6880
      ],
      "id": "32ba7da6-1c46-4022-9b20-c5381437caea",
      "name": "Supabase2",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "informacion_proyectos_y_empresa",
        "toolDescription": "Accede a la información para responder a consultas del usuario. Para cada búsqueda, utiliza sistemáticamente todas las variaciones y sinónimos posibles del término, ya que la herramienta funciona por coincidencia exacta. La estrategia de consulta debe incluir simultáneamente diferentes denominaciones del mismo concepto para garantizar resultados completos y precisos.",
        "tableName": "vector_projects",
        "topK": 10,
        "options": {
          "columnNames": {
            "values": {
              "contentColumnName": "content"
            }
          },
          "metadata": {
            "metadataValues": [
              {
                "name": "realtor_id",
                "value": "={{ $json.realtor_id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.1,
      "position": [
        -14064,
        -5504
      ],
      "id": "73847250-e26c-4e33-9b2b-f095221b1d10",
      "name": "Postgres PGVector Store",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -9648,
        -4592
      ],
      "id": "3c0355b7-a3dc-42d8-8948-93191772c618",
      "name": "OpenAI Chat Model8",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a604254b-540e-45c4-9664-499067bf3587",
              "name": "session_id",
              "value": "={{ $node['datos_oficiales'].json.session_id }}",
              "type": "string"
            },
            {
              "id": "810b9b01-656a-41c6-b337-4c373d751a6b",
              "name": "mensaje",
              "value": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
              "type": "string"
            },
            {
              "id": "31f199b0-2131-4a32-b428-567b53f2bbf5",
              "name": "realtor_id",
              "value": "={{ $node[\"datos_oficiales\"].json.realtor_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -14704,
        -1712
      ],
      "id": "16fc27d3-e824-4558-bce4-bae905341247",
      "name": "Setear5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c5361aa6-0ef0-4405-993e-6dc5dd7d0a01",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "pide_fotos_plano_videos",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14912,
        -1712
      ],
      "id": "e02a64b0-23d3-4d40-862f-1639914b7788",
      "name": "Filter_files",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -14432,
        -1456
      ],
      "id": "ffc69c2a-e640-41c2-a8d2-409310a01792",
      "name": "Postgres Chat Memory11",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -14592,
        -1520
      ],
      "id": "d3cdb2c2-839a-466c-8571-049749fee17f",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"links\": [\n    {\n      \"url\": \"\",\n      \"type\": \"\"\n    }\n  ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -14112,
        -1520
      ],
      "id": "95fc48c9-5f2f-4aa2-8104-4505bc2086ee",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "sseEndpoint": "https://primary-production-1b8b.up.railway.app/mcp/111b8878-3daa-4b17-8b56-9d1cefc5ec8e/sse",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -14272,
        -1456
      ],
      "id": "286789ac-4f32-40fd-a05a-1892885fd2e8",
      "name": "MCP_EXTRACT_FILES"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.mensaje }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Tu misión es identificar qué tipo de archivo está pidiendo el usuario en su mensaje, y buscar los archivos en la base de datos de la empresa. si el usuario está pidiendo fotos, videos o algún documento, entonces debes cumplir con la misión.\n\nPara lograrlo, tienes disponible un MCP llamado MCP_EXTRACT_FILES y sus herramientas.\n\n### Pasos a seguir:\n\n#### 1. Identificación de Herramientas Necesarias\n- Extrae el mensaje del usuario, analiza el historial de conversación e identifica el tipo (type) de archivo que pide y el nombre (name) de la “propiedad” o “proyecto” que se refiere el usuario con la petición. Guarda esas variables como:\n  - “type”: pueden ser “image” (si pide fotos), “video” (si pide videos), \"kmz\" (si pide el kmz de la propiedad) o “document” (si pide algún otro documento).\n  - “name”: el nombre del proyecto o propiedad que el usuario quiere los archivos. \n- Usa la función List Tools para identificar las herramientas disponibles en el servidor MCP.\n- Elige la herramienta adecuada para cada paso:\n\n1. Extrae los nombres oficiales y los id de todos los proyectos disponibles y reconoce solo los id (project_id) del o los proyectos que el usuario está pidiendo el o los tipos de archivo.\n2. Una vez obtengas el `project_id` de sólo los proyectos reconocidos, debes extraer las “url” que el usuario te pide.\n\n###2. Selección y Ejecución de Herramientas\nUna vez identficada la herramienta adecuada, usa la función Execute Tool para realizar la acción soliciitada.\nIncluye todos los parámetros requeridos según el esquema de la herramienta, estos son por cada una:\n\n\"obtener_id_proyecto\": \"realtor_id\" (el id para acceder a todos los proyectos de la inmobiliaria): “{{ $json.realtor_id }}”, \n“extraer_archivos”:  \"project_id\" y \"type\".\n\n\n#### 3. Salida esperada\nEn formato json, responde de la siguiente forma con la url y type de lo que obtuviste:\n{\n  \"links\": [\n    {\n      \"url\": \"\",\n      \"type\": \"\"\n    },\n    {\n      \"url\": \"\",\n      \"type\": \"\"\n    }\n    // ...pueden haber más.\n  ]\n}\n\n#### Notas importantes:\n- Solo se considerará reconocido un proyecto si se menciona su **nombre exacto**.\n- Puedes reconocer uno o varios proyectos según lo indicado en la conversación.\n- Verifica siempre que los campos requeridos están presentes antes de ejecutar cualquier herramienta.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -14432,
        -1712
      ],
      "id": "cd7f5775-cc5c-403a-ba60-c86d627010a5",
      "name": "SEND_FILES",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0e1ad23-4407-4f08-acbd-93c84e9b921a",
              "name": "enviado",
              "value": "=<información adicional>\nen tu mensaje estás enviando las fotos que pide el usuario. Dícelo al usuario y omite ofrecer enviar más.\n</información adicional>\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -12288,
        -1952
      ],
      "id": "89b0487b-c65a-4582-8359-c00558d251c6",
      "name": "mensaje_a_AI1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=links",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -13104,
        -1664
      ],
      "id": "b803aa2d-5ccc-43ec-8aa1-9fe4758f7b6d",
      "name": "Split Out",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/image",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.celular }}@s.whatsapp.net"
            },
            {
              "name": "media",
              "value": "={{ $json.links.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -12560,
        -1952
      ],
      "id": "89cb4e75-ef74-4991-b2eb-f85695b3cc9f",
      "name": "enviar_fotos",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "def56c0b-3493-47f6-9dfd-47bf445cc612",
              "name": "links",
              "value": "={{ $json.output.links }}",
              "type": "array"
            },
            {
              "id": "8e02f9d8-6ada-437b-b496-f5e59bccac46",
              "name": "celular",
              "value": "={{ $node['datos_oficiales'].json.telephone }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -13552,
        -1664
      ],
      "id": "9ec6f941-ef18-49ba-81a7-627c6b5a095a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/video",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.celular }}@s.whatsapp.net"
            },
            {
              "name": "media",
              "value": "={{ $json.links.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -12560,
        -1776
      ],
      "id": "a0b9860f-4013-40bd-9200-43f57956c207",
      "name": "enviar_videos",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/document",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.celular }}@s.whatsapp.net"
            },
            {
              "name": "media",
              "value": "={{ $json.links.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -12560,
        -1552
      ],
      "id": "77092f0a-83e7-484b-83ad-4bd30b5f7c86",
      "name": "enviar_docs",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/document",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.celular }}@s.whatsapp.net"
            },
            {
              "name": "media",
              "value": "={{ $json.links.url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -12560,
        -1344
      ],
      "id": "7d771c26-2d09-4496-95cb-27a090334f4b",
      "name": "enviar_kmz",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "750d7c85-750a-4696-895b-0e5d22412691",
              "leftValue": "={{ $json.links.type }}",
              "rightValue": "image",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -12800,
        -1952
      ],
      "id": "f16bd0ee-77c7-4fe6-a67c-1bdd07987301",
      "name": "image"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "750d7c85-750a-4696-895b-0e5d22412691",
              "leftValue": "={{ $json.links.type }}",
              "rightValue": "video",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -12800,
        -1776
      ],
      "id": "612b0193-caaf-45f1-949c-02d49b9a203f",
      "name": "video"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "750d7c85-750a-4696-895b-0e5d22412691",
              "leftValue": "={{ $json.links.type }}",
              "rightValue": "document",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -12800,
        -1552
      ],
      "id": "6fed96e8-b38d-4648-90b8-4ee2798b30e0",
      "name": "docs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "750d7c85-750a-4696-895b-0e5d22412691",
              "leftValue": "={{ $json.links.type }}",
              "rightValue": "kmz",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -12800,
        -1344
      ],
      "id": "d2638c83-6ac9-4ba6-a7ad-76fe9873a101",
      "name": "kmz"
    },
    {
      "parameters": {
        "jsCode": "// 1) Obtenemos TODOS los ítems que llegan al nodo\nconst items = $input.all();\n\n// 2) Creamos un array para ir guardando todos los mensajes \"enviado\"\nlet allMessages = [];\n\n// 3) Recorremos cada ítem de entrada\nfor (let i = 0; i < items.length; i++) {\n  const data = items[i].json;\n  // Si existe la propiedad \"enviado\", la agregamos al array\n  if (data.enviado) {\n    // En caso de que fuera array, puedes manejarlo aquí:\n    // if (Array.isArray(data.enviado)) {\n    //   allMessages.push(...data.enviado);\n    // } else {\n    //   allMessages.push(data.enviado);\n    // }\n\n    // Si siempre es un string, simplemente:\n    allMessages.push(data.enviado);\n  }\n}\n\n// 4) Eliminamos duplicados convirtiendo el array a Set y luego de vuelta a array\nallMessages = [...new Set(allMessages)];\n\n// 5) Unimos todos los mensajes en un único string, separados por línea en blanco\nconst finalText = allMessages.join('\\n\\n');\n\n// 6) Devolvemos un SOLO ítem con la propiedad \"enviado\" que contiene el texto final\nreturn [\n  {\n    json: {\n      enviado: finalText,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -11600,
        -1632
      ],
      "id": "e73db97a-7e89-428b-be60-90a771683379",
      "name": "enviado"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0e1ad23-4407-4f08-acbd-93c84e9b921a",
              "name": "enviado",
              "value": "=<información adicional>\nen tu mensaje estás enviando los/el videeo(s) que pide el usuario. Dícelo al usuario y omite ofrecer enviar más.\n</información adicional>",
              "type": "string"
            },
            {
              "id": "c40743d3-a021-4362-8ae2-ca6bb59ade92",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -12288,
        -1776
      ],
      "id": "18d5c048-90fd-4a15-a846-c7045b7b42b3",
      "name": "mensaje_a_AI2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0e1ad23-4407-4f08-acbd-93c84e9b921a",
              "name": "enviado",
              "value": "=<información adicional>\nen tu mensaje estás enviando el plano o carpeta que pide el usuario. Dícelo al usuario y omite ofrecer enviar más.\n</información adicional>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -12288,
        -1552
      ],
      "id": "b1698f79-7cba-4870-9770-5e249a4d63fe",
      "name": "mensaje_a_AI3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0e1ad23-4407-4f08-acbd-93c84e9b921a",
              "name": "enviado",
              "value": "=<información adicional>\nen tu mensaje estás enviando el kmz que pide el usuario. Dícelo al usuario y omite ofrecer enviar más.\n</información adicional>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -12288,
        -1344
      ],
      "id": "e596413a-b7ab-447d-9026-e2070a5568c2",
      "name": "mensaje_a_AI4"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -11888,
        -1664
      ],
      "id": "89e057da-a52f-40c2-a7b4-1ac68367f1e1",
      "name": "Merge1"
    },
    {
      "parameters": {
        "content": "## Agente send files\n- ocupa MCP que identifica que propiedad se pide documentos y extrae esa info con su type correspondiente",
        "height": 940,
        "width": 1420
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -15152,
        -2064
      ],
      "typeVersion": 1,
      "id": "1f9817b4-4469-48b0-b1be-357546c39c00",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "content": "## Envío\n- Es configurable según la cantidad y tipos de archivos que suba. Más que nada por documentos que correspondan a ciertas características",
        "height": 940,
        "width": 1420,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -13600,
        -2064
      ],
      "typeVersion": 1,
      "id": "d4fdecb2-ee51-4b59-8a22-0fa9252b6891",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "170e9b66-e3c4-440e-9ae6-08886c6958be",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "desinteres",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -15072,
        -880
      ],
      "id": "0454dacc-63ef-4198-8057-f08dff7475b2",
      "name": "Filter_desinteres",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $node['datos_oficiales'].json.id_prospect }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "stage",
              "fieldValue": "not-interested"
            },
            {
              "fieldId": "automatization",
              "fieldValue": "FALSE"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -14720,
        -896
      ],
      "id": "74a531be-ceee-492b-b5bd-220457d8e67b",
      "name": "update_not_interested",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "43c862c2-0d85-41dd-8504-f7774c629a22",
              "leftValue": "={{ $('datos_oficiales').item.json.automatization }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "34a764cf-f815-482f-8e69-a03ccaaa70ff",
              "leftValue": "={{ $json.mensaje }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -17792,
        -5360
      ],
      "id": "ec1e2bd6-0851-45ca-9cb1-c45d5410f606",
      "name": "automatization"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $node['datos_oficiales'].json.id_prospect }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "stage",
              "fieldValue": "not-interested"
            },
            {
              "fieldId": "automatization",
              "fieldValue": "FALSE"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -17488,
        -4944
      ],
      "id": "4d25a760-330e-483f-a2b3-680b4f597601",
      "name": "update_not_interested1",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -17104,
        -5120
      ],
      "id": "eae21ab4-66bd-4483-a381-0aab45923ccf",
      "name": "OpenAI Chat Model9",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://gate.whapi.cloud/presences/{{ $('variables_primeras').item.json.celular }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "presence",
              "value": "=typing"
            },
            {
              "name": "delay",
              "value": "={{ 200 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -20288,
        -5344
      ],
      "id": "f1145b39-d7c2-42fe-b3eb-815580c546c1",
      "name": "typing...",
      "retryOnFail": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fd297f3c-a2ca-4526-bf67-76661293a845",
              "leftValue": "={{ $('RESPUESTA').item.json.output.length < 500 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -7472,
        -4304
      ],
      "id": "e2a73509-c862-4a7a-83ba-4b53d908f047",
      "name": "If text too long"
    },
    {
      "parameters": {
        "content": "## Desinterés\n- Filtramos y actualizamos al prospecto cuando no está calificado.",
        "height": 440,
        "width": 680
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -15152,
        -1040
      ],
      "typeVersion": 1,
      "id": "4a954016-a0d6-4e12-a230-23e3db2ed2f1",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=#Input del usuario: \"{{ $('Setear4').item.json.mensaje }}\"\n\n# Respuesta del bot: \"{{ $node[\"fixing_response\"].json.text }}\"",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Eres un asistente experto en dividir textos largos en partes cortas para enviarlos por WhatsApp.\n\nVas a recibir:\n- **Mensaje original del usuario**.\n- **Respuesta larga del bot**.\n\nTu única tarea:\n- **Dividir la respuesta del bot** en mensajes de máximo 500 caracteres cada uno.\n- Mantener el contenido EXACTO sin agregar, quitar o cambiar palabras, salvo para:\n  - Evitar cortar frases o palabras por la mitad.\n  - Añadir conectores simples como “Te sigo contando…”, “Por otro lado…”, “Además…” solo cuando una idea continúa en el siguiente mensaje.\n- Cada mensaje debe terminar en una idea o frase completa.\n- Si hay links, colócalos en el mensaje donde aparecen en el texto original.\n- No inventes información, no resumas salvo para unir frases cortadas de forma natural sin perder información clave.\n- El tono debe mantenerse tal cual el texto original (no reescribir para sonar más “amigable”).\n- No respondas la consulta del usuario; solo corta la respuesta del bot.\n- Si el mensaje original del usuario ayuda a contextualizar dónde cortar, puedes usarlo solo para eso.\n\nFormato de salida:\nDevuelve únicamente un objeto JSON con una sola variable llamada `\"messages\"`, que sea un array de strings.  \nCada string es un mensaje de máximo 500 caracteres, listo para enviar por WhatsApp.\n\nEjemplo de salida:\n{\n  \"messages\": [\n    \"Primer mensaje (máx 500 caracteres, termina en frase o idea completa).\",\n    \"Segundo mensaje (continúa la idea de forma natural, máximo 500 caracteres).\",\n    \"Tercer mensaje...\"\n  ]\n}\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -7344,
        -4096
      ],
      "id": "0f67b476-d638-4741-867a-372f917386ad",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"messages\": []\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -7200,
        -3872
      ],
      "id": "6be04be4-e3f7-4f49-8ebb-6fa3443c50bd",
      "name": "Structured Output Parser5"
    },
    {
      "parameters": {
        "fieldToSplitOut": "messages",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -6640,
        -4080
      ],
      "id": "31c437dd-2973-4e85-9a3b-6ccb631ad5ce",
      "name": "separate_messages"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.celular }}"
            },
            {
              "name": "body",
              "value": "={{ $json.messages }}"
            },
            {
              "name": "typing_time",
              "value": "={{ 3 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5984,
        -4048
      ],
      "id": "c3b6b0a1-5cca-4563-9e4d-476e9db0dc4e",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -6336,
        -4080
      ],
      "id": "2698b63f-babc-404e-99aa-a5458fa143b9",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2ec6d028-1f55-41d9-a6a8-b3419b10c8e8",
              "name": "=messages",
              "value": "={{ $json.output.messages }}",
              "type": "array"
            },
            {
              "id": "e4fa7918-2a4a-42ce-88bd-60bc05dac185",
              "name": "celular",
              "value": "={{ $node[\"datos_oficiales\"].json.telephone }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6864,
        -4080
      ],
      "id": "b2638cad-f359-4ec2-b409-38a4784ff82d",
      "name": "set_messages"
    },
    {
      "parameters": {
        "mode": "delete"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -13552,
        -1440
      ],
      "id": "584550e4-32a2-48c6-af2a-d23b7bae6791",
      "name": "Chat Memory Manager5"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Setear5').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -13552,
        -1280
      ],
      "id": "208de6cb-b517-4927-b05b-06b4d7dfc8d6",
      "name": "Postgres Chat Memory12",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "followups",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "prospect_id",
              "condition": "eq",
              "keyValue": "={{ $node[\"datos_oficiales\"].json.id_prospect }}"
            },
            {
              "keyName": "realtor_id",
              "condition": "eq",
              "keyValue": "={{ $node[\"datos_oficiales\"].json.realtor_id }}"
            },
            {
              "keyName": "type",
              "condition": "eq",
              "keyValue": "prospect"
            },
            {
              "keyName": "completed",
              "condition": "eq",
              "keyValue": "FALSE"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -14384,
        -7760
      ],
      "id": "891e103e-d707-471e-b85c-c64fc7e1c467",
      "name": "get_followups_scheduled",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "60f8c006-7c1f-4b14-9cd0-f5b8754e58fa",
              "leftValue": "={{ Object.keys($json).length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -14160,
        -7760
      ],
      "id": "80aba1b2-d540-46d5-8b71-ee8fb9534e82",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "followups",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13952,
        -7856
      ],
      "id": "381fd60b-20cf-4cab-8357-716819034d3d",
      "name": "delete",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "followups",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "prospect_id",
              "fieldValue": "={{ $node[\"datos_oficiales\"].json.id_prospect }}"
            },
            {
              "fieldId": "realtor_id",
              "fieldValue": "={{ $node[\"datos_oficiales\"].json.realtor_id }}"
            },
            {
              "fieldId": "type",
              "fieldValue": "prospect"
            },
            {
              "fieldId": "completed",
              "fieldValue": "FALSE"
            },
            {
              "fieldId": "date_followup_scheduled",
              "fieldValue": "={{ (() => {\n  // Obtiene el JSON del nodo datos_oficiales\n  const data = $node[\"datos_oficiales\"].json;\n\n  // Si es array, usa el primer elemento\n  const info = Array.isArray(data) ? data[0] : data;\n\n  // Toma directamente followup_configuration\n  const rules = info.followup_configuration;\n\n  const d = new Date();\n\n  const apply = (rule) => {\n    const r = Number(rule?.Range);\n    if (!Number.isFinite(r) || r === 0) return;\n    const t = String(rule?.Type_range || '').toLowerCase();\n    if (t.startsWith('day'))  d.setUTCDate(d.getUTCDate() + r);\n    if (t.startsWith('hour')) d.setUTCHours(d.getUTCHours() + r);\n  };\n\n  if (Array.isArray(rules)) rules.forEach(apply);\n  else if (rules && typeof rules === 'object') apply(rules);\n\n  return d.toISOString();\n})() }}"
            },
            {
              "fieldId": "type_followup",
              "fieldValue": "1"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13664,
        -7744
      ],
      "id": "1ce49ca9-6490-40ed-8962-be8a7ba4a82e",
      "name": "create_followup_prospects",
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a070486c-0b05-4b99-983c-f6dfe335f84a",
              "leftValue": "={{\n  (() => {\n    const out = $node[\"Agente_madre\"].json.output;\n    // Si es un array, retorna el array.\n    if (Array.isArray(out)) return out;\n\n    // Si es objeto con 'intencion' como array, retorna ese array.\n    if (out && Array.isArray(out.intencion)) return out.intencion;\n\n    // Si es objeto plano, retorna las claves como array.\n    if (out && typeof out === \"object\") return Object.keys(out);\n\n    // Cualquier otro caso, retorna array vacío para evitar errores.\n    return [];\n  })()\n}}",
              "rightValue": "contacto_humano",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14720,
        -224
      ],
      "id": "268f662c-3fe4-4f68-8ee7-83e3ce08e862",
      "name": "Filter_calification1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.type}}",
                    "rightValue": "specific-vendors",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8186410d-0702-4e45-a3ff-c4eb88ba920b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "specific-vendors"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1d30b27e-5016-4877-81bd-fc3a8edb432d",
                    "leftValue": "={{$node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.type}}",
                    "rightValue": "property-based",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "property-based"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -14512,
        -224
      ],
      "id": "1015b49e-61b6-4024-b641-213e63d52a6d",
      "name": "Switch"
    },
    {
      "parameters": {
        "content": "## Human COntact\n1. Filter\n2. switch: Va a revisar notifications_brokers_configurations y ver si la configuracion en human_contact es por un vendedor especifico o según propiedad\n3. split_brokers_ids: Va. a ir a buscar los id's de los brokers seleccionados (puede ser 1 o mas de 1) y los va a separar en items diferentes\n4. Split: va a seprar por items si es que existen más de 1 vendedor asignado\n5. get_brokers: va a buscar según el id la información delbroker\n6. send_notifications: Se le envía el mensaje a el o los vendedeores asignados.\n\n---\n\n7. split_brokers_by_properties: Va a ir a buscar los proyectos de interes en array y los va a separar por ítems\n8. search_brokers: Va a tomar los proyectos de interes del prospecto y en base a ello va a buscar los id's de brokers asociados\n9. get_brokers2: Va a tomar a cada broker y extraer sus datos\n10. send_notifications: Se le envía el mensaje a el o los vendedeores asignados. \n",
        "height": 988,
        "width": 2476
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -15152,
        -544
      ],
      "typeVersion": 1,
      "id": "5944b870-2e9b-4c08-802b-15a85f903995",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.brokers }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13360,
        -320
      ],
      "id": "0872068a-18e5-4457-97f1-ec0230207713",
      "name": "get_brokers",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nEl prospecto *{{ $node[\"datos_oficiales\"].json.name }}* nos pidió hablar con un ejecutivo. Estos son sus datos:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: {{ $node[\"datos_oficiales\"].json.property_name }}\n*Último mensaje*: \"_{{ $node[\"datos_oficiales\"].json.mensaje }}_\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -13120,
        -320
      ],
      "id": "ee8349b0-00af-4062-9359-5d1b8f6f12e0",
      "name": "send_notifications"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -13616,
        -336
      ],
      "id": "d2d31123-797a-4096-8183-a99b601340eb",
      "name": "Loop"
    },
    {
      "parameters": {
        "jsCode": "const projectIds = items.map(item => item.json.id);\n\n// Cada nombre envuelto en comillas dobles\nconst propertiesNames = items.map(item => `\"${item.json.name_property}\"`).join(', ');\n\nreturn [\n  {\n    projects: projectIds,\n    properties_name: propertiesNames\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -18448,
        -5360
      ],
      "id": "3cd892bd-d647-4f33-9bec-7362a4dc7fbb",
      "name": "join_properties",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "prospect_project_interests",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "prospect_id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -18912,
        -5360
      ],
      "id": "6a20e339-ffbd-45ef-ba64-952ce7e0248b",
      "name": "get_properties",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "prospects",
        "filters": {
          "conditions": [
            {
              "keyName": "realtor_id",
              "keyValue": "={{ $('variables_primeras').item.json.realtor_id }}"
            },
            {
              "keyName": "telephone",
              "keyValue": "={{ $('variables_primeras').item.json.celular }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -19136,
        -5360
      ],
      "id": "7c54fb5e-0302-4841-a49e-a422f40b1bef",
      "name": "datos_prospectos",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e233a76-b0a0-46fd-bef7-a8fba9d4dc6e",
              "name": "properties_interested",
              "value": "={{ $node[\"join_properties\"].json.projects }}",
              "type": "array"
            },
            {
              "id": "e5360e5a-ff7a-4de1-88a2-1e59f7f1a7b2",
              "name": "id_prospect",
              "value": "={{ $node[\"datos_prospectos\"].json.id }}",
              "type": "string"
            },
            {
              "id": "699584e8-89f4-493f-870f-f260c7ac44b4",
              "name": "realtor_id",
              "value": "={{ $node[\"datos_prospectos\"].json.realtor_id }}",
              "type": "string"
            },
            {
              "id": "fcdf2b0d-476e-403f-a5a6-99b55de09356",
              "name": "vendor_id",
              "value": "={{ $node[\"datos_prospectos\"].json.vendor_id }}",
              "type": "string"
            },
            {
              "id": "f68bf1f6-6665-4934-9b4e-aae6ad0d3ce1",
              "name": "name",
              "value": "={{ $node[\"datos_prospectos\"].json.name }}",
              "type": "string"
            },
            {
              "id": "35a964ab-3517-43c7-8a01-55d3ef921176",
              "name": "=stage",
              "value": "={{ $node[\"datos_prospectos\"].json.stage }}",
              "type": "string"
            },
            {
              "id": "e0916e3b-c1dd-44af-83c3-231d2fcaf741",
              "name": "automatization",
              "value": "={{ $node[\"datos_prospectos\"].json.automatization }}",
              "type": "boolean"
            },
            {
              "id": "0fe3b03e-ffeb-4540-9622-2902fdec2448",
              "name": "telephone",
              "value": "={{ $node[\"datos_prospectos\"].json.telephone }}",
              "type": "string"
            },
            {
              "id": "f7f14e55-7c9d-43e6-9bae-1a0def4da684",
              "name": "calification_variables",
              "value": "={{ $node[\"datos_prospectos\"].json.calification_variables }}",
              "type": "string"
            },
            {
              "id": "2be01185-7d8a-425d-8ac4-448f2e61dfb4",
              "name": "observations",
              "value": "={{ $node[\"datos_prospectos\"].json.observations }}",
              "type": "string"
            },
            {
              "id": "676aaad2-a87f-489b-8911-4717bdb21a4c",
              "name": "scheduled_at",
              "value": "={{ $node[\"datos_prospectos\"].json.scheduled_at }}",
              "type": "string"
            },
            {
              "id": "76a68731-88dd-4159-809d-c9eccc394df3",
              "name": "created_at",
              "value": "={{ $node[\"datos_prospectos\"].json.created_at }}",
              "type": "string"
            },
            {
              "id": "5f7017e4-d467-41af-b2fd-d8a182fb4d18",
              "name": "updated_at",
              "value": "={{ $node[\"datos_prospectos\"].json.updated_at }}",
              "type": "string"
            },
            {
              "id": "72dc4030-4af5-45d1-b0df-2b990b56bfd9",
              "name": "source",
              "value": "={{ $node[\"datos_prospectos\"].json.source }}",
              "type": "string"
            },
            {
              "id": "f78886ed-62b1-43ac-bd3a-4b6bebc291ed",
              "name": "realtor_id",
              "value": "={{ $node[\"variables_primeras\"].json.realtor_id }}",
              "type": "string"
            },
            {
              "id": "85d1802d-2574-46a7-811e-e6c0639bcdb4",
              "name": "channel_id",
              "value": "={{ $node[\"variables_primeras\"].json.channel_id }}",
              "type": "string"
            },
            {
              "id": "8c8ca11e-6e79-4ea3-b774-b7bed924fee9",
              "name": "chat_id",
              "value": "={{ $node[\"variables_primeras\"].json.chat_id }}",
              "type": "string"
            },
            {
              "id": "668d5c2c-7d78-49af-988c-96b0bb3605cd",
              "name": "mensaje",
              "value": "={{ $node[\"variables_primeras\"].json.mensaje }}",
              "type": "string"
            },
            {
              "id": "320ef7fd-5fcf-4e9e-a908-54429359625a",
              "name": "id_vector_project",
              "value": "={{ $node[\"variables_primeras\"].json.id_vector_project }}",
              "type": "string"
            },
            {
              "id": "037679f3-34a5-4a66-b2af-99aa6dabcdbb",
              "name": "session_id",
              "value": "={{ $node[\"variables_primeras\"].json.session_id }}",
              "type": "string"
            },
            {
              "id": "e71187ac-1738-4c67-906f-dbd7fe19c7dc",
              "name": "followup_configuration",
              "value": "={{ $node[\"variables_primeras\"].json.followup_configuration }}",
              "type": "array"
            },
            {
              "id": "b647afd9-ff8d-400b-9faf-d6baa0612eee",
              "name": "notifications_brokers_configurations",
              "value": "={{ $node[\"variables_primeras\"].json.notifications_brokers_configurations }}",
              "type": "object"
            },
            {
              "id": "5bc424ab-2766-4a64-97ba-5fcc212b56aa",
              "name": "property_name",
              "value": "={{ $node[\"join_properties\"].json.properties_name }}",
              "type": "string"
            },
            {
              "id": "4591b8d3-1420-4a4f-bb75-d673aa7ddde6",
              "name": "personality_bot",
              "value": "={{ $node[\"extraer inmobiliaria_id\"].json.bot_personality }}",
              "type": "string"
            },
            {
              "id": "46e69cec-2c9d-4ee8-bcbb-8f4ff84b0a23",
              "name": "tone_bot",
              "value": "={{ $node[\"extraer inmobiliaria_id\"].json.bot_tone }}",
              "type": "string"
            },
            {
              "id": "91bbd445-7580-4104-89d7-5f19c08460aa",
              "name": "name_bot",
              "value": "={{ $node[\"extraer inmobiliaria_id\"].json.bot_name }}",
              "type": "string"
            },
            {
              "id": "1528c5c9-1317-4f02-9ae4-f5aacf2c0b80",
              "name": "name_realtor",
              "value": "={{ $node[\"extraer inmobiliaria_id\"].json.name }}",
              "type": "string"
            },
            {
              "id": "9a2d3c4b-a129-4c4e-bd1a-60a7a5303bb4",
              "name": "location_realtor",
              "value": "={{ $node[\"extraer inmobiliaria_id\"].json.location }}",
              "type": "string"
            },
            {
              "id": "70e52c64-5694-48af-a073-2d8d44a217ee",
              "name": "mentioned_properties",
              "value": "={{ $node[\"datos_prospectos\"].json.mentioned_properties }}",
              "type": "array"
            },
            {
              "id": "800e112a-d208-4694-b2bc-0e1e91ff371e",
              "name": "description_realtor",
              "value": "={{ $node[\"extraer inmobiliaria_id\"].json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -18016,
        -5360
      ],
      "id": "97f600e5-9b05-463b-9781-11442cff0861",
      "name": "datos_oficiales"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nEl prospecto *{{ $node[\"datos_oficiales\"].json.name }}* nos pidió hablar con un ejecutivo. Estos son sus datos:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: {{ $node[\"datos_oficiales\"].json.property_name }}\n*Último mensaje*: \"_{{ $node[\"datos_oficiales\"].json.mensaje }}_\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -13040,
        -16
      ],
      "id": "e877c2f1-d128-49f8-95c6-05ac6d1b0822",
      "name": "send_notifications1"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "vendor_assigned_projects",
        "filters": {
          "conditions": [
            {
              "keyName": "project_id",
              "keyValue": "={{ $node[\"join_properties\"].json.projects }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13856,
        -64
      ],
      "id": "c56e7112-7305-4ddf-8a2b-185bc5cf8069",
      "name": "search_brokers",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.vendor_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13296,
        -16
      ],
      "id": "af55fac4-6416-4a0e-b9ab-29128071e7fb",
      "name": "get_brokers2",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -13584,
        -48
      ],
      "id": "7d5c1e7a-ffba-4caf-9ac4-bd491221b65d",
      "name": "Loop2"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "projects",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.project_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -18672,
        -5360
      ],
      "id": "671203d4-0d97-4223-9512-cf6997373623",
      "name": "project_names",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c904a33b-9ee7-4cdd-a85f-92453f19757c",
              "leftValue": "={{ $json.output.justificacion }}",
              "rightValue": "No",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            },
            {
              "id": "f6e7a2ce-fa4e-49ee-b1f4-e801c3b6a132",
              "leftValue": "={{ $json.output.justificacion }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -7584,
        -4816
      ],
      "id": "6f9fad43-2e79-45c2-9a85-497149aa5592",
      "name": "if_cant_response"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.type}}",
                    "rightValue": "specific-vendors",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8186410d-0702-4e45-a3ff-c4eb88ba920b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "specific-vendors"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1d30b27e-5016-4877-81bd-fc3a8edb432d",
                    "leftValue": "={{$node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.type}}",
                    "rightValue": "property-based",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "property-based"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -7440,
        -5456
      ],
      "id": "fcb61225-1da8-4991-b4ab-19575c21a2f0",
      "name": "Switch1"
    },
    {
      "parameters": {
        "content": "## Human COntact\n1. switch: Va a revisar notifications_brokers_configurations y ver si la configuracion en human_contact es por un vendedor especifico o según propiedad\n2. split_brokers_ids: Va. a ir a buscar los id's de los brokers seleccionados (puede ser 1 o mas de 1) y los va a separar en items diferentes\n3. Split: va a seprar por items si es que existen más de 1 vendedor asignado\n4. get_brokers: va a buscar según el id la información delbroker\n5. send_notifications: Se le envía el mensaje a el o los vendedeores asignados.\n\n---\n\n6. split_brokers_by_properties: Va a ir a buscar los proyectos de interes en array y los va a separar por ítems\n7. search_brokers: Va a tomar los proyectos de interes del prospecto y en base a ello va a buscar los id's de brokers asociados\n8. get_brokers2: Va a tomar a cada broker y extraer sus datos\n9. send_notifications: Se le envía el mensaje a el o los vendedeores asignados. \n",
        "height": 1052,
        "width": 1956
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -7520,
        -5904
      ],
      "typeVersion": 1,
      "id": "7c40d3ff-b4e5-44fa-9cf2-90153a3b7b94",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.brokers }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -6480,
        -5584
      ],
      "id": "21d27343-615c-494a-871e-7126e0e3257f",
      "name": "get_brokers1",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nBroky no pudo responder a una consulta específica del prospecto *{{ $node[\"datos_oficiales\"].json.name }}*.\n\nEstos son sus datos:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: {{ $node[\"datos_oficiales\"].json.property_name }}\n*Última consulta*: \"_{{ $node[\"datos_oficiales\"].json.mensaje }}_\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6240,
        -5584
      ],
      "id": "ef05825d-cc23-46c0-8ce6-e893649a39d3",
      "name": "send_notifications2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -6736,
        -5600
      ],
      "id": "762b70d4-294a-4b22-a19f-3c6800f43dd5",
      "name": "Loop1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nBroky no pudo responder a una consulta específica del prospecto *{{ $node[\"datos_oficiales\"].json.name }}*.\n\nEstos son sus datos:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: {{ $node[\"datos_oficiales\"].json.property_name }}\n*Última consulta*: \"_{{ $node[\"datos_oficiales\"].json.mensaje }}_\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -5920,
        -5280
      ],
      "id": "d6fd9f75-2c0b-464d-b22d-81764b868c7c",
      "name": "send_notifications3"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "vendor_assigned_projects",
        "returnAll": true,
        "filterType": "string",
        "filterString": "={{ ($node[\"join_properties\"].json.projects || []).length \n  ? 'project_id=in.(\"' + $node[\"join_properties\"].json.projects.join('\",\"') + '\")' \n  : 'project_id=eq.00000000-0000-0000-0000-000000000000' }}"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -6768,
        -5296
      ],
      "id": "3806b642-3a5a-4da4-a477-69e0c701efee",
      "name": "search_brokers1",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.vendor_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -6224,
        -5280
      ],
      "id": "71f2f3bf-a879-46b5-8d50-674790d4b99d",
      "name": "get_brokers3",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -6448,
        -5296
      ],
      "id": "fd212458-17b9-4da9-b80b-203e1e8d884c",
      "name": "Loop3"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('datos_oficiales_prospectos1').item.json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "automatization",
              "fieldValue": "FALSE"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -7376,
        -5008
      ],
      "id": "52ba6ff3-7171-46f5-a78a-58f0fc2c3c2c",
      "name": "automation_desactived",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "automatization",
              "fieldValue": "FALSE"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -14512,
        32
      ],
      "id": "069032de-b78e-4aef-9ae1-45e43a8cd105",
      "name": "automation_desactived1",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$node[\"datos_oficiales\"].json.notifications_brokers_configurations.visit_scheduled.type}}",
                    "rightValue": "specific-vendors",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "8186410d-0702-4e45-a3ff-c4eb88ba920b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "specific-vendors"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1d30b27e-5016-4877-81bd-fc3a8edb432d",
                    "leftValue": "={{$node[\"datos_oficiales\"].json.notifications_brokers_configurations.visit_scheduled.type}}",
                    "rightValue": "property-based",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "property-based"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b2ef8786-56df-4103-8f44-8c615f9930c3",
                    "leftValue": "={{$node[\"datos_oficiales\"].json.notifications_brokers_configurations.visit_scheduled.type}}",
                    "rightValue": "availability-based",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "availability-based"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -12800,
        -2784
      ],
      "id": "665b9711-a405-47a2-8c39-7ff1b87e2167",
      "name": "Switch2"
    },
    {
      "parameters": {
        "content": "## Visit Scheduled\n1. Filter\n2. switch: Va a revisar notifications_brokers_configurations y ver si la configuracion en human_contact es por un vendedor especifico o según propiedad\n3. split_brokers_ids: Va. a ir a buscar los id's de los brokers seleccionados (puede ser 1 o mas de 1) y los va a separar en items diferentes\n4. Split: va a seprar por items si es que existen más de 1 vendedor asignado\n5. get_brokers: va a buscar según el id la información delbroker\n6. send_notifications: Se le envía el mensaje a el o los vendedeores asignados.\n\n---\n\n7. split_brokers_by_properties: Va a ir a buscar los proyectos de interes en array y los va a separar por ítems\n8. search_brokers: Va a tomar los proyectos de interes del prospecto y en base a ello va a buscar los id's de brokers asociados\n9. get_brokers2: Va a tomar a cada broker y extraer sus datos\n10. send_notifications: Se le envía el mensaje a el o los vendedeores asignados. \n",
        "height": 860,
        "width": 2588
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -13552,
        -3072
      ],
      "typeVersion": 1,
      "id": "ac9845d4-022f-49a6-9b82-6a8d442f42e0",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.brokers }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -11680,
        -3056
      ],
      "id": "14a7915b-d3ca-46bf-b284-43fd8a72b09e",
      "name": "get_brokers4",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}@s.whatsapp.net"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nEl prospecto *{{ $node[\"datos_oficiales\"].json.name }}* ha agendado una visita con nosotros, los detalles son:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: {{ $node[\"datos_oficiales\"].json.property_name }}\n*Día y hora agendada*: {{\n  (() => {\n    const fechaRaw = $node[\"get_prospect\"].json.scheduled_at;\n    if (!fechaRaw) return '';\n    const fecha = new Date(fechaRaw);\n    // Usamos métodos UTC para NO convertir la zona horaria\n    const meses = [\n      \"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\",\n      \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"\n    ];\n    const dia = fecha.getUTCDate();\n    const mes = meses[fecha.getUTCMonth()];\n    const anio = fecha.getUTCFullYear();\n    const hora = String(fecha.getUTCHours()).padStart(2, '0');\n    const minutos = String(fecha.getUTCMinutes()).padStart(2, '0');\n    return `${dia} de ${mes} de ${anio}, ${hora}:${minutos} hrs`;\n  })()\n}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -11440,
        -3056
      ],
      "id": "1a9e9f29-5000-4ce8-bbfe-9ce032d3cc2b",
      "name": "send_notifications4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -11968,
        -3072
      ],
      "id": "f8941358-9f18-4f94-bef6-78915ab6f85a",
      "name": "Loop4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}@s.whatsapp.net"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nEl prospecto *{{ $node[\"datos_oficiales\"].json.name }}* ha agendado una visita con nosotros, los detalles son:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: {{ $node[\"datos_oficiales\"].json.property_name }}\n*Día y hora agendada*: {{\n  (() => {\n    const fechaRaw = $node[\"get_prospect\"].json.scheduled_at;\n    if (!fechaRaw) return '';\n    const fecha = new Date(fechaRaw);\n    // Usamos métodos UTC para NO convertir la zona horaria\n    const meses = [\n      \"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\",\n      \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"\n    ];\n    const dia = fecha.getUTCDate();\n    const mes = meses[fecha.getUTCMonth()];\n    const anio = fecha.getUTCFullYear();\n    const hora = String(fecha.getUTCHours()).padStart(2, '0');\n    const minutos = String(fecha.getUTCMinutes()).padStart(2, '0');\n    return `${dia} de ${mes} de ${anio}, ${hora}:${minutos} hrs`;\n  })()\n}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -10944,
        -2752
      ],
      "id": "8dfc10fb-ef2d-4014-9ce0-f584018837cf",
      "name": "send_notifications5"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "vendor_assigned_projects",
        "filters": {
          "conditions": [
            {
              "keyName": "project_id",
              "keyValue": "={{ $node[\"join_properties\"].json.projects }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -11728,
        -2784
      ],
      "id": "41912840-a472-4547-8bef-065e41200716",
      "name": "search_brokers2",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $json.vendor_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -11184,
        -2752
      ],
      "id": "82145614-356a-470c-93f1-ecee9c263a27",
      "name": "get_brokers5",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -11408,
        -2784
      ],
      "id": "508c3214-68a4-4942-bbf1-82b3e3517949",
      "name": "Loop5"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "automatization",
              "fieldValue": "FALSE"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -12800,
        -2544
      ],
      "id": "3a8a8197-6e08-4a2c-a83f-15bc0c217b8c",
      "name": "automation_desactived2",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a65fd48c-4431-46b7-8a66-bc76d0ef2348",
              "leftValue": "={{ $json.stage }}",
              "rightValue": "scheduled",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -13152,
        -2784
      ],
      "id": "e0fded58-ab89-4426-a9bf-1cc524aac4e7",
      "name": "If4"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "prospects",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $('Setear3').item.json.prospect_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13424,
        -2784
      ],
      "id": "f30dbac0-13f6-4137-b8bc-73c7be724ad4",
      "name": "get_prospect",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "followups",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "prospect_id",
              "condition": "eq",
              "keyValue": "={{ $node[\"datos_oficiales\"].json.id_prospect }}"
            },
            {
              "keyName": "realtor_id",
              "condition": "eq",
              "keyValue": "={{ $node[\"datos_oficiales\"].json.realtor_id }}"
            },
            {
              "keyName": "type",
              "condition": "eq",
              "keyValue": "broker"
            },
            {
              "keyName": "completed",
              "condition": "eq",
              "keyValue": "FALSE"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -14384,
        -7280
      ],
      "id": "e0ffde16-105f-4029-bc45-f9683dbd9e5b",
      "name": "get_followups_scheduled1",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "60f8c006-7c1f-4b14-9cd0-f5b8754e58fa",
              "leftValue": "={{ Object.keys($json).length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -14160,
        -7280
      ],
      "id": "b8d5719d-7d8b-4cb8-9d65-884931eb3216",
      "name": "If5"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "followups",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13952,
        -7376
      ],
      "id": "06719b49-9b4c-484c-bb60-9193dc0a5d5a",
      "name": "delete1",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "followups",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "prospect_id",
              "fieldValue": "={{ $node[\"datos_oficiales\"].json.id_prospect }}"
            },
            {
              "fieldId": "realtor_id",
              "fieldValue": "={{ $node[\"datos_oficiales\"].json.realtor_id }}"
            },
            {
              "fieldId": "type",
              "fieldValue": "broker"
            },
            {
              "fieldId": "completed",
              "fieldValue": "FALSE"
            },
            {
              "fieldId": "date_followup_scheduled",
              "fieldValue": "={{\n(() => {\n  // Accede al objeto completo (considerando que puede venir como array)\n  const data = $node[\"datos_oficiales\"].json;\n  // Si es array, toma el primer elemento\n  const info = Array.isArray(data) ? data[0] : data;\n  // Toma la configuración de notifications_brokers_configurations.no_response\n  const config = info.notifications_brokers_configurations?.no_response || {};\n  let d = new Date();\n  if (config.Type_range === \"day\") d.setUTCDate(d.getUTCDate() + Number(config.Range));\n  else if (config.Type_range === \"hour\") d.setUTCHours(d.getUTCHours() + Number(config.Range));\n  return d.toISOString();\n})()\n}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13664,
        -7264
      ],
      "id": "3ca480d9-0df6-4e3b-9459-03b9c4deb6c2",
      "name": "create_followup_prospects1",
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "30741736-b1eb-44ff-b746-0ce8a1e95fec",
              "leftValue": "={{ $node['datos_oficiales'].json.followup_configuration && $node['variables_primeras'].json.followup_configuration.length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14768,
        -7760
      ],
      "id": "f19f996d-4adf-48e7-9ffc-bc25464f0044",
      "name": "followup_prospect"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "30741736-b1eb-44ff-b746-0ce8a1e95fec",
              "leftValue": "={{\n  $node[\"datos_oficiales\"].json.notifications_brokers_configurations &&\n  $node[\"datos_oficiales\"].json.notifications_brokers_configurations.no_response &&\n  Object.keys($node[\"datos_oficiales\"].json.notifications_brokers_configurations.no_response).length > 0 &&\n  $node[\"datos_oficiales\"].json.notifications_brokers_configurations.no_response.type !== \"no-followup\"\n}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -14768,
        -7280
      ],
      "id": "5c5450dc-e372-4769-a796-4146d2bed2f3",
      "name": "followup_broker"
    },
    {
      "parameters": {
        "content": "## Followup brokers\n1. filter: revisa si la columna followups_brokers existe información (no es null) en ese caso entonces se asume que la inmobiliaria confoguró al menos para hacer 1 seguimiento.\n2. get_followups_scheduled: Va a buscar a la tabla followups si es que existe algún seguimiento al prospecto que no esté completado. Filtra por prospect_id, realtor_id, completed: false, type: realtor\n3. if: si existen followups anteriores incompletos, se irá a true, si no a false.\n4. Delete: Los followups anteriores incompletos se eliminarán\n5. create_followup_prospects: Se creará un nuevo registro en la tabla \"followups para el seguimiento del broker. **Falta que rafa agregue la temporalidad que configura la inmobiliaria para poder agregar la fecha de seguimiento a los brokers que se hará**",
        "height": 500,
        "width": 1580
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -14912,
        -7552
      ],
      "typeVersion": 1,
      "id": "69806e0d-6729-4786-9430-45adbc4280e0",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $node[\"datos_oficiales\"].json.mensaje }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "# Rol y objetivo\nEres un clasificador de intenciones experto para una empresa inmobiliaria. Analizas el último mensaje del usuario y el contexto inmediato para identificar TODAS las intenciones válidas, sin inventar ni asumir.\n\n<model_params>\n- Razona con parsimonia: prioriza reglas explícitas sobre “intuición”.\n- Si hay conflicto entre reglas, aplica la jerarquía de prioridad definida abajo.\n- Responde SIEMPRE solo con JSON válido, sin texto adicional.\n</model_params>\n\n# Alcance de contexto\n- Considera el mensaje actual y hasta los últimos 3 turnos (usuario y agente).\n- “Anclar” = la intención debe estar explícitamente conectada a la última pregunta/tema abierto del agente o a un proyecto mencionado en ese tramo.\n\n# Taxonomía (minúsculas, sin tildes) y criterios\n- \"busqueda_informacion\": el usuario pide datos generales (proyectos, ubicaciones, empresa, características, servicios, métodos de pago EN GENERAL). No incluye promesas personales (“puedo pagar…”) ni datos propios.\n- \"anotar_proyecto\": interés concreto por inventario ya mencionado (nombre del proyecto, referencia deíctica clara: “esas parcelas”, “ese proyecto”, “las que dijiste”), o preguntas específicas sobre ese inventario.\n- \"forma_pago\": el usuario declara cómo pagará (“puedo pagar con…”, “tengo crédito…”), o solicita opciones de pago para SU caso (“¿puedo pagar con…?”). Si solo pregunta opciones en abstracto (“¿qué métodos aceptan?”) → \"busqueda_informacion\".\n- \"fecha_compra\": da fecha/periodo para comprar **y** el tópico abierto es compra.\n- \"fecha_visita\": da fecha/periodo para visitar **y** el tópico abierto es visita.\n- \"contacto_humano\": pide explícitamente hablar con persona/equipo (vendedor, ejecutivo, asesor, “me llamen”, “un teléfono”).\n- \"pide_fotos_plano_videos\": solicita fotos, planos, renders, brochure, catálogo, videos, tour virtual, pdf.\n- \"desinteres\": expresa explícitamente que no está interesado/descarta.\n- \"conversacion\": si ninguna aplica.\n\n# Reglas de desambiguacion y prioridad\n1) **Anclaje al tema**: una intención solo es válida si responde al último tema/pregunta del agente o a un proyecto/inventario citado en el tramo de contexto.\n2) **Fechas**:\n   - Si hay mención de fecha/periodo y el tema abierto es compra → \"fecha_compra\".\n   - Si el tema abierto es visita → \"fecha_visita\".\n   - Si no hay tema abierto de compra/visita, no clasifiques fecha.\n3) **Forma de pago vs búsqueda de info**:\n   - “¿Qué métodos aceptan?” → \"busqueda_informacion\".\n   - “¿Puedo pagar con crédito hipotecario?” → \"busqueda_informacion\".\n   - “Puedo pagar con…” (declaración) → \"forma_pago\".\n4) **Anotar proyecto** requiere referencia clara al inventario mencionado (nombre o deíctica inequívoca). Si solo hay preferencia amplia (“busco al sur”) sin anclaje, NO es \"anotar_proyecto\".\n5) **Multi-intención**: divide el mensaje en cláusulas (por “. , ; y además pero”) y evalúa cada una. Incluye TODAS las intenciones válidas, sin duplicar.\n6) **Empates/ambigüedad**: si dos intenciones compiten y ninguna cumple anclaje o criterio estricto, omite y usa \"conversacion\".\n7) **Palabras sueltas** no bastan: nunca clasifiques por keyword sin anclaje.\n\n# Procedimiento (pasos determinísticos)\n1) Identifica el **tema abierto** del agente (última pregunta o instrucción pendiente).\n2) Segmenta el mensaje del usuario en cláusulas.\n3) Para cada cláusula, aplica en orden: Anclaje → Reglas específicas de la taxonomía → Prioridad de desambiguación.\n4) Agrega todas las intenciones válidas (sin repetir).\n5) Si no hay ninguna válida, devuelve \"conversacion\".\n\n# Formato de salida (OBLIGATORIO)\n- Devuelve EXCLUSIVAMENTE: {\"intencion\": [\"intencion1\", \"intencion2\", ...]}\n- Sin texto adicional, sin justificaciones, sin campos extra.\n\n# Casos rapidos (sanity checks)\n- Agente: “¿Cuándo te gustaría comprar?”\n  Usuario: “La próxima semana puedo.”\n  → {\"intencion\": [\"fecha_compra\"]}\n\n- Agente: “¿Cuándo te gustaría visitar?”\n  Usuario: “La próxima semana puedo.”\n  → {\"intencion\": [\"fecha_visita\"]}\n\n- Usuario: “¿Qué métodos de pago aceptan?”\n  → {\"intencion\": [\"busqueda_informacion\"]}\n\n- Usuario: “¿Puedo pagar con crédito hipotecario?”\n  → {\"intencion\": [\"busqueda_informacion\"]}\n\n- Agente mencionó “Parcelas Los Robles”.\n  Usuario: “¿Esas parcelas tienen luz y agua?”\n  → {\"intencion\": [\"busqueda_informacion\", \"anotar_proyecto\"]}\n\n- Usuario: “No me interesa, gracias.”\n  → {\"intencion\": [\"desinteres\"]}\n\n- Usuario: “Quiero hablar con un vendedor.”\n  → {\"intencion\": [\"contacto_humano\"]}\n\n- Usuario: “Mándame el plano y un video.”\n  → {\"intencion\": [\"pide_fotos_plano_videos\"]}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -17008,
        -5360
      ],
      "id": "6af85899-857c-4396-baf9-5ff860c32329",
      "name": "Agente_madre",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "executeOnce": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "model": "gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -9104,
        -4592
      ],
      "id": "4a7a9b10-cf63-4979-bf8b-509bf110de87",
      "name": "OpenAI Chat Model10",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=#Mensaje del usuario: \"{{ $('Setear4').item.json.mensaje }}\"\n\n#Respuesta del bot: \"{{ $node[\"RESPUESTA\"].json.output }}\"",
        "messages": {
          "messageValues": [
            {
              "message": "=# Rol y objetivo\nEres un agente de REESCRITURA CONCISA para el sector inmobiliario. Recibes el mensaje de una conversación con el usuario y la respuesta generada por otro bot, y tu ÚNICA tarea es reescribir esa respuesta para que suene auténtica, cálida, fluida y profesional en la conversación.\n\n# Parámetros del modelo\n<model_params>\n- reasoning_effort: minimal      # evita sobre-analizar; reescritura rápida y fiel\n- verbosity: low                 # respuestas breves\n- agentic_eagerness: low         # no agregues pasos, ofertas ni preguntas nuevas\n- stop_condition: tras producir la versión humanizada y fiel, termina\n</model_params>\n\n# Personalidad y tono\n- <personalidad>: \"{{ $node[\"datos_oficiales\"].json.personality_bot }}\"\n- <tono>: \"{{ $node[\"datos_oficiales\"].json.tone_bot }}\"\n\n# Reglas de transformación (obligatorias)\n1) NO INVENTES CONTENIDO: No inventes información. Mantén datos, cifras, fechas, enlaces y nombres tal cual.\n2) HUMANIZAR: Reescribe con naturalidad y coherencia, adaptando siempre a la <personalidad> y <tono>. Si es necesario puedes omitir información no relevante para mejorar la coherencia.\n3) CONCISIÓN: máximo 500 caracteres. Elimina redundancias, muletillas e información poco relevante para mantener la estructura.\n4) ESTRUCTURA: Puedes reordenar oraciones para claridad, pero sin alterar el significado.\n5) PREGUNTAS: No añadas preguntas nuevas. Si ves que en el historial se repite mucho alguna pregunta, omítela para no sonar redundante en la conversación.\n6) OFERTAS/ACCIONES: No añadas ofertas, recomendaciones, llamados a la acción, coordinaciones, ni pasos siguientes que no estén en el original.\n7) TONO: Evita frases de chatbot (p. ej., “¡Qué bueno!”, “Estoy aquí para ayudarte”, “Si tienes otra consulta, dime”). Evita signos de exclamación innecesarios y emojis.\n8) EMPATÍA: NUNCA seas frío, exigente, insistente o inadecuado con las preguntas hacia el usuario. \n\n# Guardarraíles (prohibiciones duras)\n- Prohibido ser redundante y repetitivo con preguntas o información que le entregas al usuario.\n- Prohibido añadir promesas, recomendaciones, ofertas, alternativas, derivaciones o coordinación de contacto si el original no lo incluye.\n- Prohibido cambiar cifras, políticas, condiciones o enlaces.\n- Prohibido convertir un texto declarativo en uno persuasivo.\n- Mejora siempre la experiencia del usuario en la conversación.\n- Prohibido saludar si en la respuesta del bot no existe un saludo\n\n# Salida (formato)\nDevuelve ÚNICAMENTE la respuesta reescrita, lista para el usuario, sin metacomentarios, sin etiquetas adicionales y sin JSON.\n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -9072,
        -4816
      ],
      "id": "4683cfe6-bda5-4cb4-9e8d-b22634b3a4b0",
      "name": "fixing_response"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"justificacion\": \"No\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -7792,
        -4576
      ],
      "id": "d5c0a842-1ad7-4902-b9bb-904bd332074a",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "mode": "delete"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -8752,
        -4816
      ],
      "id": "0571a368-b856-411c-82ea-a5a54e7bbe91",
      "name": "delete_last_one"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Setear4').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -8800,
        -4592
      ],
      "id": "722ec77b-b83e-413f-8eb4-9fa525a6e6ef",
      "name": "Postgres Chat Memory14",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_brokers2').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -12848,
        -16
      ],
      "id": "12663628-5b44-4c24-87c3-c76f7f2662be",
      "name": "link_broker_prospect",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_brokers').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -12896,
        -320
      ],
      "id": "30cea285-9725-4897-92e8-bd80bfc2113d",
      "name": "link_broker_prospect1",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_brokers3').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -5680,
        -5280
      ],
      "id": "f3ea4fa4-6029-4e24-b979-8a7aeca6cde1",
      "name": "link_broker_prospect2",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_brokers1').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -6000,
        -5584
      ],
      "id": "cb32d166-1f40-4779-b9f4-a22f6e28abf8",
      "name": "link_broker_prospect3",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0e1ad23-4407-4f08-acbd-93c84e9b921a",
              "name": "mensaje_contacto",
              "value": "=<información adicional>\nEl usuario ha pedido contactar a una persona humana:\nDile al usuario que hemos contactado a un vendedor (humano) para que se contacte con el usuario. No comentes nada más a pesar de la etapa en que se encuentre\n</información adicional>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -11248,
        -1392
      ],
      "id": "638c2107-f1e5-469b-a9b2-2f0586a66d7f",
      "name": "mensaje_a_AI"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0e1ad23-4407-4f08-acbd-93c84e9b921a",
              "name": "mensaje_desinteres",
              "value": "=Hemos notado que el usuario perdió el interés en los proyectos. Por favor despídete amablemente y sé empático en tu despedida.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -11264,
        -1120
      ],
      "id": "3aabb49d-0645-4070-b355-ed83f30cdb0a",
      "name": "mensaje_desinteres"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.brokers }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13872,
        256
      ],
      "id": "216c49fe-ee9c-450e-82cf-c49b7e3c9dfc",
      "name": "get_broker_predefined",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "12a185b6-714a-4b55-abb3-a985671f4dad",
              "leftValue": "={{ $node['datos_oficiales'].json.properties_interested[0] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -14144,
        96
      ],
      "id": "7eef646f-adb4-42ba-92c5-8bdcba78193f",
      "name": "If6"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}@s.whatsapp.net"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nEl prospecto *{{ $node[\"datos_oficiales\"].json.name }}* nos pidió hablar con un ejecutivo. Estos son sus datos:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: No reconocida aún\n*Último mensaje*: \"_{{ $node[\"datos_oficiales\"].json.mensaje }}_\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -13632,
        256
      ],
      "id": "ef7489a4-6de0-46a6-80b5-a830d463bb5f",
      "name": "send_notifications6",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_broker_predefined').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13408,
        256
      ],
      "id": "64c0b289-bc40-47b7-aa22-23b419883fa5",
      "name": "link_broker_prospect4",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.brokers }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -11696,
        -2464
      ],
      "id": "3ebec49a-645a-40ef-9899-53c3a9473b66",
      "name": "get_broker_predefined1",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "12a185b6-714a-4b55-abb3-a985671f4dad",
              "leftValue": "={{ $node['datos_oficiales'].json.properties_interested[0] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -12032,
        -2736
      ],
      "id": "396ece32-eb45-45d6-9881-5c11c7488690",
      "name": "If7"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}@s.whatsapp.net"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nEl prospecto *{{ $node[\"datos_oficiales\"].json.name }}* nos pidió hablar con un ejecutivo. Estos son sus datos:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: No reconocida aún\n*Último mensaje*: \"_{{ $node[\"datos_oficiales\"].json.mensaje }}_\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -11456,
        -2464
      ],
      "id": "0bec4b4e-fdb2-407a-b0ec-2e75b1893a02",
      "name": "send_notifications7",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_broker_predefined1').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -11232,
        -2464
      ],
      "id": "cdd557fb-6c91-4b7a-8542-297c38b5a335",
      "name": "link_broker_prospect5",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_brokers5').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -10720,
        -2752
      ],
      "id": "7e23c73d-89fc-4032-a872-0e8450341cdb",
      "name": "link_broker_prospect6",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_brokers4').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -11184,
        -3056
      ],
      "id": "d17a4e09-6889-47b3-9638-32552d730b7a",
      "name": "link_broker_prospect7",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "profiles",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ $node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.brokers }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -6768,
        -4992
      ],
      "id": "7dda64e7-dde9-4d08-939f-569c5027010a",
      "name": "get_broker_predefined2",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "12a185b6-714a-4b55-abb3-a985671f4dad",
              "leftValue": "={{ $node['datos_oficiales'].json.properties_interested[0] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -7168,
        -5248
      ],
      "id": "7b68a7b6-6634-4e3e-9b65-94e34ddfc35f",
      "name": "If8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.telephone }}@s.whatsapp.net"
            },
            {
              "name": "body",
              "value": "=Hola *{{ $json.name }}*,\n\nEl prospecto *{{ $node[\"datos_oficiales\"].json.name }}* nos pidió hablar con un ejecutivo. Estos son sus datos:\n\n*Nombre Whatsapp*: {{ $node[\"datos_oficiales\"].json.name }}\n*Número Whatsapp*: +{{ $node[\"datos_oficiales\"].json.telephone }}\n*Propiedad de interés*: No reconocida aún\n*Último mensaje*: \"_{{ $node[\"datos_oficiales\"].json.mensaje }}_\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6528,
        -4992
      ],
      "id": "69e3b48b-c4d0-492a-be5a-aa22364ba1db",
      "name": "send_notifications8",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$node[\"datos_oficiales\"].json.id_prospect}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "vendor_id",
              "fieldValue": "={{ $('get_broker_predefined2').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -6304,
        -4992
      ],
      "id": "61f7aa78-bba8-4d36-94dd-2cbca298d51f",
      "name": "link_broker_prospect8",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        -7040,
        -4624
      ],
      "id": "fcf52b7c-a543-444f-872c-e20b00f64ec1",
      "name": "OpenAI Chat Model11",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=- Mensaje del usuario: \"{{ $('Setear4').item.json.mensaje }}\"\n- Respuesta del bot: \"{{ $node[\"fixing_response\"].json.text }}\"\n- <personalidad>: \"{{ $node[\"datos_oficiales\"].json.personality_bot }}\"\n- <tono>: \"{{ $node[\"datos_oficiales\"].json.tone_bot }}\"",
        "messages": {
          "messageValues": [
            {
              "message": "=# Rol y objetivo\nEres un reescritor conciso para soporte inmobiliario.  \nTu única tarea es:\n1) Resumir en 1–3 frases la información esencial de la respuesta del bot.  \n2) Informar que ya contactaste a un ejecutivo para que responda la solicitud del usuario.  \n3) No ofrecer nada más (no enviar info, no adjuntar, no proponer coordinar, no pedir preferencias de contacto, no hacer preguntas).\n\n# Reglas\n- Mantén solo los hechos clave del bot (sin adornos, sin recomendaciones, sin condicionales).\n- No ofrecer acciones adicionales o alternativas (enviar info, presupuestos, coordinar visitas, WhatsApp, llamadas, etc.).\n- No formular preguntas.\n- No mencionar nombres de ejecutivos; siempre decir “un ejecutivo del equipo”.\n- Adaptar el lenguaje y estilo a la <personalidad> y <tono> proporcionados.\n- Mensaje breve (2 a 5 líneas máximo), natural, humano y profesional.\n- Cierra siempre informando que ya contactaste a un ejecutivo del equipo y que se comunicará en breve.\n\n# Plantilla de salida (adaptar al contexto, sin texto extra)\n[Resumen breve de la información esencial en 1–2 frases].  \nYa contacté a un ejecutivo del equipo para que responda tu solicitud y aclare todo. Se pondrá en contacto contigo en breve.\n\n# Salida\nDevuelve únicamente el mensaje final listo para el usuario, sin explicaciones ni comentarios."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -7008,
        -4768
      ],
      "id": "c84fa20c-c8fb-4ba5-ac65-4e0603f19088",
      "name": "fixing_response1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://gate.whapi.cloud/messages/text",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Bearer uik2F2faS4XgQue7PUHRNhuQSpiyDjqF"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $node[\"datos_oficiales\"].json.telephone }}"
            },
            {
              "name": "body",
              "value": "={{ $node[\"fixing_response1\"].json.text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6592,
        -4768
      ],
      "id": "8e39f283-870a-4e24-a7ad-363be8b8785f",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -7424,
        -3824
      ],
      "id": "1acc3a34-b508-4652-b258-6ab6cf4da4ed",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"respuesta\": \"Aquí va la respuesta que proporcionas al usuario basada en la información que obtuviste de tus herramientas. Entrega exactamente la información sin agregar ni omitir detalles.\",\n  \"project_id\": [\"id_propiedad_1\", \"id_propiedad_2\"]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -13504,
        -5504
      ],
      "id": "74ee3d5b-4719-4354-ac1f-3a28e8199f4c",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -13472,
        -5344
      ],
      "id": "eba8cc5c-adc0-417c-90bb-5b6599aa19cc",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "prospects",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $node['datos_oficiales'].json.id_prospect }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "mentioned_properties",
              "fieldValue": "={{ [...new Set([...( $node[\"datos_oficiales\"].json.mentioned_properties || [] ), ...( Array.isArray($node[\"RAG\"].json.output && $node[\"RAG\"].json.output.project_id) ? $node[\"RAG\"].json.output.project_id : Array.isArray($node[\"RAG\"].json.project_id) ? $node[\"RAG\"].json.project_id : Object.values( ($node[\"RAG\"].json.output && $node[\"RAG\"].json.output.project_id) ? $node[\"RAG\"].json.output.project_id : ($node[\"RAG\"].json.project_id || {}) ) ) ])].filter(Boolean) }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -13648,
        -6144
      ],
      "id": "3eae127f-e8cf-4442-98f7-a814fe078a05",
      "name": "mentioned_properties",
      "credentials": {
        "supabaseApi": {
          "id": "tp6xpBeEpsVXQ2pA",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"intencion\": [\"busqueda_informacion\", \"anotar_proyecto\"]\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -16784,
        -5104
      ],
      "id": "9b70d7fe-c72b-4c08-983a-6ff104f89b25",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -16800,
        -4896
      ],
      "id": "880f5e1a-2337-4cc4-91a0-f074f50052ae",
      "name": "OpenAI Chat Model12",
      "credentials": {
        "openAiApi": {
          "id": "Z9nfCA2hx524mB8D",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "brokers",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -12240,
        -2992
      ],
      "id": "748e6eef-3d7e-4fe2-a7e9-b84ff579d224",
      "name": "Split Out1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f35cfbe0-a78d-4240-80cb-c020ecd68918",
              "name": "brokers",
              "value": "={{ $node[\"datos_oficiales\"].json.notifications_brokers_configurations.visit_scheduled.brokers }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -12448,
        -2992
      ],
      "id": "64924e7a-f698-4a11-905e-86bb5b19a51c",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "brokers",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -13888,
        -336
      ],
      "id": "296b7419-4b8c-4f89-ad84-fd2a02300934",
      "name": "Split Out2",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f35cfbe0-a78d-4240-80cb-c020ecd68918",
              "name": "brokers",
              "value": "={{ $node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.brokers }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -14096,
        -336
      ],
      "id": "b2043e36-ae53-4753-9cd1-cdc07f14f8ca",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "fieldToSplitOut": "brokers",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -6992,
        -5600
      ],
      "id": "b209672e-0b90-4132-b4b7-25f453451b28",
      "name": "Split Out3",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f35cfbe0-a78d-4240-80cb-c020ecd68918",
              "name": "brokers",
              "value": "={{ $node[\"datos_oficiales\"].json.notifications_brokers_configurations.human_contact.brokers }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -7200,
        -5600
      ],
      "id": "d7c39710-563e-460d-bead-b7d0185f1ede",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Setear4').item.json.session_id }}",
        "tableName": "chats_history_n8n"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -9440,
        -4560
      ],
      "id": "adb48af9-11b6-434f-ad46-4895a93c5cd6",
      "name": "Postgres Chat Memory16",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM public.chats_history_n8n\nWHERE session_id = '{{ $('datos_oficiales').item.json.session_id }}'\n  AND NOT (message ? 'content')\n  AND (message ? 'additional_kwargs')\n  AND (message ? 'response_metadata');",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -16576,
        -5280
      ],
      "id": "f3839a97-e3ce-4650-857f-0006184c94f0",
      "name": "delete problematic register",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM public.chats_history_n8n\nWHERE session_id = '{{ $('Setear4').item.json.session_id }}'\n  AND NOT (message ? 'content')\n  AND (message ? 'additional_kwargs')\n  AND (message ? 'response_metadata');",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -9184,
        -4400
      ],
      "id": "036b3e93-605d-4bdc-a37a-b43e358161e2",
      "name": "delete problematic register1",
      "credentials": {
        "postgres": {
          "id": "RSCbx1gV6hL5g8sY",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "primary-production-1b8b.up.railway.app",
            "user-agent": "axios/1.11.0",
            "content-length": "251",
            "accept": "application/json, text/plain, */*",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "162.220.234.103",
            "x-forwarded-host": "primary-production-1b8b.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/us-east4-eqdc4a",
            "x-railway-request-id": "S1GzaTp2TMa9bYWAezItjw",
            "x-real-ip": "162.220.234.103",
            "x-request-start": "1759110260674"
          },
          "params": {},
          "query": {},
          "body": {
            "realtor_id": "05e67a9f-4d46-4dfc-bc2f-51178c21d5e4",
            "telephone": "56987439705",
            "session_id": "56987439705:05e67a9f-4d46-4dfc-bc2f-51178c21d5e4",
            "name": "Jorge Riquelme",
            "channel_id": "WOLVRN-BXESQ",
            "chat_id": "56987439705@s.whatsapp.net",
            "message": "Hola"
          },
          "webhookUrl": "https://primary-production-1b8b.up.railway.app/webhook/17f87edc-655e-4474-8643-f3e21b5109cb",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "0": {
      "main": [
        [
          {
            "node": "Agente_madre",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "update_not_interested1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "variables_primeras": {
      "main": [
        [
          {
            "node": "typing...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "datos_prospectos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "crear_prospectos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "busqueda_prospectos": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crear_prospectos": {
      "main": [
        [
          {
            "node": "datos_prospectos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Agente_madre",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Internet_tool": {
      "ai_tool": [
        [
          {
            "node": "RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filter_rag": {
      "main": [
        [
          {
            "node": "Setear",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ACTUALIZAR_PROYECTO": {
      "main": [
        [
          {
            "node": "Chat Memory Manager2",
            "type": "main",
            "index": 0
          },
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory2": {
      "ai_memory": [
        [
          {
            "node": "ACTUALIZAR_PROYECTO",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Filter_intention": {
      "main": [
        [
          {
            "node": "Setear1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter_calification": {
      "main": [
        [
          {
            "node": "filtro_etapa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "CALIFICAR_USUARIO",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory4": {
      "ai_memory": [
        [
          {
            "node": "CALIFICAR_USUARIO",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "extraer inmobiliaria_id": {
      "main": [
        [
          {
            "node": "variables_primeras",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "extraer inmobiliaria_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setear": {
      "main": [
        [
          {
            "node": "RAG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory3": {
      "ai_memory": [
        [
          {
            "node": "RAG",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "RAG": {
      "main": [
        [
          {
            "node": "Chat Memory Manager1",
            "type": "main",
            "index": 0
          },
          {
            "node": "output_rag",
            "type": "main",
            "index": 0
          },
          {
            "node": "mentioned_properties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setear1": {
      "main": [
        [
          {
            "node": "ACTUALIZAR_PROYECTO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filtro_etapa": {
      "main": [
        [
          {
            "node": "Setear2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setear2": {
      "main": [
        [
          {
            "node": "CALIFICAR_USUARIO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager": {
      "main": [
        [
          {
            "node": "Filter_rag",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 6
          },
          {
            "node": "Filter_intention",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter_calification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter_schedule",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter_files",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter_desinteres",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter_calification1",
            "type": "main",
            "index": 0
          },
          {
            "node": "followup_prospect",
            "type": "main",
            "index": 0
          },
          {
            "node": "followup_broker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory5": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory6": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "MCP Calification": {
      "ai_tool": [
        [
          {
            "node": "CALIFICAR_USUARIO",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "CALIFICAR_USUARIO",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory7": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager3",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "CALIFICAR_USUARIO": {
      "main": [
        [
          {
            "node": "Chat Memory Manager3",
            "type": "main",
            "index": 0
          },
          {
            "node": "output_calification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter_schedule": {
      "main": [
        [
          {
            "node": "Setear3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fecha_actual1": {
      "ai_tool": [
        [
          {
            "node": "AGENDAR_VISITA",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "AGENDAR_VISITA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory8": {
      "ai_memory": [
        [
          {
            "node": "AGENDAR_VISITA",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Setear3": {
      "main": [
        [
          {
            "node": "AGENDAR_VISITA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "poner_fecha_visita": {
      "ai_tool": [
        [
          {
            "node": "AGENDAR_VISITA",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory9": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager4",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AGENDAR_VISITA": {
      "main": [
        [
          {
            "node": "Chat Memory Manager4",
            "type": "main",
            "index": 0
          },
          {
            "node": "output_scheduled",
            "type": "main",
            "index": 0
          },
          {
            "node": "get_prospect",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output_rag": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RESPUESTA": {
      "main": [
        [
          {
            "node": "fixing_response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "delete problematic register1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "unir_variables": {
      "main": [
        [
          {
            "node": "datos_oficiales_prospectos1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prompt_etapa": {
      "main": [
        [
          {
            "node": "Setear4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "datos_oficiales_prospectos1": {
      "main": [
        [
          {
            "node": "prompt_etapa",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setear4": {
      "main": [
        [
          {
            "node": "RESPUESTA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain5": {
      "main": [
        [
          {
            "node": "if_cant_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "ACTUALIZAR_PROYECTO",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP_UPDATE_INTRESTED_PROJECTS": {
      "ai_tool": [
        [
          {
            "node": "ACTUALIZAR_PROYECTO",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "unir_variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "output_calification": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "output_scheduled": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "ACTUALIZAR_PROYECTO",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Supabase2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "ai_tool": [
        [
          {
            "node": "RAG",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "RESPUESTA",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Filter_files": {
      "main": [
        [
          {
            "node": "Setear5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory11": {
      "ai_memory": [
        [
          {
            "node": "SEND_FILES",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "SEND_FILES",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "SEND_FILES",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Setear5": {
      "main": [
        [
          {
            "node": "SEND_FILES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP_EXTRACT_FILES": {
      "ai_tool": [
        [
          {
            "node": "SEND_FILES",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "image",
            "type": "main",
            "index": 0
          },
          {
            "node": "video",
            "type": "main",
            "index": 0
          },
          {
            "node": "docs",
            "type": "main",
            "index": 0
          },
          {
            "node": "kmz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enviar_fotos": {
      "main": [
        [
          {
            "node": "mensaje_a_AI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SEND_FILES": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chat Memory Manager5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensaje_a_AI1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "image": {
      "main": [
        [
          {
            "node": "enviar_fotos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "video": {
      "main": [
        [
          {
            "node": "enviar_videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "docs": {
      "main": [
        [
          {
            "node": "enviar_docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "kmz": {
      "main": [
        [
          {
            "node": "enviar_kmz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enviar_videos": {
      "main": [
        [
          {
            "node": "mensaje_a_AI2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enviar_docs": {
      "main": [
        [
          {
            "node": "mensaje_a_AI3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enviar_kmz": {
      "main": [
        [
          {
            "node": "mensaje_a_AI4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensaje_a_AI2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "mensaje_a_AI3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "mensaje_a_AI4": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "enviado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enviado": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Filter_desinteres": {
      "main": [
        [
          {
            "node": "update_not_interested",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "automatization": {
      "main": [
        [
          {
            "node": "0",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Agente_madre",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If text too long": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "typing...": {
      "main": [
        [
          {
            "node": "busqueda_prospectos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "set_messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "separate_messages": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_messages": {
      "main": [
        [
          {
            "node": "separate_messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory12": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager5",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "get_followups_scheduled": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "delete",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create_followup_prospects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete": {
      "main": [
        [
          {
            "node": "create_followup_prospects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter_calification1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          },
          {
            "node": "automation_desactived1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_brokers": {
      "main": [
        [
          {
            "node": "send_notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop": {
      "main": [
        [
          {
            "node": "mensaje_a_AI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_brokers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications": {
      "main": [
        [
          {
            "node": "link_broker_prospect1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "join_properties": {
      "main": [
        [
          {
            "node": "datos_oficiales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_properties": {
      "main": [
        [
          {
            "node": "project_names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "datos_prospectos": {
      "main": [
        [
          {
            "node": "get_properties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "datos_oficiales": {
      "main": [
        [
          {
            "node": "automatization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications1": {
      "main": [
        [
          {
            "node": "link_broker_prospect",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search_brokers": {
      "main": [
        [
          {
            "node": "Loop2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_brokers2": {
      "main": [
        [
          {
            "node": "send_notifications1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop2": {
      "main": [
        [
          {
            "node": "mensaje_a_AI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_brokers2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "project_names": {
      "main": [
        [
          {
            "node": "join_properties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if_cant_response": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          },
          {
            "node": "automation_desactived",
            "type": "main",
            "index": 0
          },
          {
            "node": "fixing_response1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If text too long",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_brokers1": {
      "main": [
        [
          {
            "node": "send_notifications2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications2": {
      "main": [
        [
          {
            "node": "link_broker_prospect3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop1": {
      "main": [
        [],
        [
          {
            "node": "get_brokers1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications3": {
      "main": [
        [
          {
            "node": "link_broker_prospect2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search_brokers1": {
      "main": [
        [
          {
            "node": "Loop3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_brokers3": {
      "main": [
        [
          {
            "node": "send_notifications3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop3": {
      "main": [
        [],
        [
          {
            "node": "get_brokers3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_brokers4": {
      "main": [
        [
          {
            "node": "send_notifications4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications4": {
      "main": [
        [
          {
            "node": "link_broker_prospect7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop4": {
      "main": [
        [],
        [
          {
            "node": "get_brokers4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications5": {
      "main": [
        [
          {
            "node": "link_broker_prospect6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search_brokers2": {
      "main": [
        [
          {
            "node": "Loop5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_brokers5": {
      "main": [
        [
          {
            "node": "send_notifications5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop5": {
      "main": [
        [],
        [
          {
            "node": "get_brokers5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          },
          {
            "node": "automation_desactived2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_prospect": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_followups_scheduled1": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "delete1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "create_followup_prospects1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete1": {
      "main": [
        [
          {
            "node": "create_followup_prospects1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "followup_prospect": {
      "main": [
        [
          {
            "node": "get_followups_scheduled",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "followup_broker": {
      "main": [
        [
          {
            "node": "get_followups_scheduled1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente_madre": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "delete problematic register",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "fixing_response",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "fixing_response": {
      "main": [
        [
          {
            "node": "delete_last_one",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain5",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "delete_last_one": {
      "main": [
        [
          {
            "node": "Basic LLM Chain5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory14": {
      "ai_memory": [
        [
          {
            "node": "delete_last_one",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "link_broker_prospect": {
      "main": [
        [
          {
            "node": "Loop2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "link_broker_prospect1": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "link_broker_prospect2": {
      "main": [
        [
          {
            "node": "Loop3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "link_broker_prospect3": {
      "main": [
        [
          {
            "node": "Loop1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensaje_a_AI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "update_not_interested": {
      "main": [
        [
          {
            "node": "mensaje_desinteres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mensaje_desinteres": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "get_broker_predefined": {
      "main": [
        [
          {
            "node": "send_notifications6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "search_brokers",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_broker_predefined",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications6": {
      "main": [
        [
          {
            "node": "link_broker_prospect4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "link_broker_prospect4": {
      "main": [
        [
          {
            "node": "mensaje_a_AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_broker_predefined1": {
      "main": [
        [
          {
            "node": "send_notifications7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "search_brokers2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_broker_predefined1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications7": {
      "main": [
        [
          {
            "node": "link_broker_prospect5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "link_broker_prospect6": {
      "main": [
        [
          {
            "node": "Loop5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "link_broker_prospect7": {
      "main": [
        [
          {
            "node": "Loop4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_broker_predefined2": {
      "main": [
        [
          {
            "node": "send_notifications8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If8": {
      "main": [
        [
          {
            "node": "search_brokers1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_broker_predefined2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notifications8": {
      "main": [
        [
          {
            "node": "link_broker_prospect8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "fixing_response1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "fixing_response1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "RAG",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Agente_madre",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Loop4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Loop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Split Out3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out3": {
      "main": [
        [
          {
            "node": "Loop1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory16": {
      "ai_memory": [
        [
          {
            "node": "RESPUESTA",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "delete problematic register": {
      "main": [
        [
          {
            "node": "Agente_madre",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "delete problematic register1": {
      "main": [
        [
          {
            "node": "RESPUESTA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "XMKhpx1guWfJJTLC"
  },
  "versionId": "3b9153dc-6c32-4ea0-8a96-6ecdc39dbcf2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "59aa2bbc0a1b6b097a70204d79e3a51313693243694d5644b1dd9aa9cab13a36"
  },
  "id": "gYOuZ4LNxy0rpQJK",
  "tags": []
}